#include <iostream>
#include "../../src/e3extensions/secureint.h"
#include <papi.h>

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	long long s, e;

	s = PAPI_get_real_cyc();
	for (int i = 0; i < 1000000; i++) asm volatile("nop");
	e = PAPI_get_real_cyc();
	cout << "For loop: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	Cryptosystem cs("4585241807698736832350162769503974621410769627022522387077427379087293524942585113511754452648539401313022047032686699514873722379183720050489090831866293","32","18485845339102255361051821573392750171018179015300547555195703823343007456049529209775030273957557309397746814865448327030387755145525294046858210422294647908816394100135722079439387403841742784402978770686721315060449188238357153633465433532568688384984935773674083802555921193927033608487320453124671964357","7350419813100134265413911233189531244889749195749962349175517111088275954296610064726019969980138719118175066041006317210417353461165846134771714698403465944735925914453137509891336995019069768817941778057096394364158267318874288677828968588629514592592351540538057212607093842828328865070716099971208439458","6899628173930734945265881012493618569423544944995529572725862819444120540460877265742365750848191248035665108647637614363422153407627470651378464616172903488647071839358709922160052021209538716715960333086545484868371008399107888144901069641913720235560247648442926030065556190144564111892054398982223865978", libgDir, gFunctionName);
	e = PAPI_get_real_cyc();
	cout << "Cryptosystem cs: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt a("16447302925039453723721639784072916516316756399946298994090441913147150681950220404451747090409248088245107300880070724010550989415771317905214277238032711260545960132122438211642861704396501623397353932478881833299021312881489721376817174214964423627661525115380290334929727841023607550347710538132545589494",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt a: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt b("9655606835433058942813111595774751957227418781709468944603500588882832803480095608969833839341963704623166024563917774346405002785992281873035325653929382908203650346223632446189995151238410823018058521061112298071743968939759442436274211715944918769511212417327093565602570882191135958725041359630236320175",cs);
	e = PAPI_get_real_cyc();
	cout << "SecureInt b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	SecureInt c;
	e = PAPI_get_real_cyc();
	cout << "SecureInt c: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a + b;
	e = PAPI_get_real_cyc();
	cout << "c = a + b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = a * b;
	e = PAPI_get_real_cyc();
	cout << "c = a * b: " << (e-s) << " cycles\n";

	s = PAPI_get_real_cyc();
	c = SecureInt::G(a,b);
	e = PAPI_get_real_cyc();
	cout << "c = G(a,b): " << (e-s) << " cycles\n";	

	return 0;
}

