#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	Cryptosystem cs("143464523395668319401780189161472347297",16,"16955664090895320898262356866538462176619519759508852128981807045139996124995",{"20201819903337619913109638573124321956574636593767101657102578457701380647497","10017988360041603467133570791292377643531944009202235892479855366605524835756","11135079855643050479666820188987040755435432256802512664524777928714062370402","11126424849010700145278295029705787145714237157806295915236999739839022119561","13741706642352105529497115892530664048265405252406417390907540787044142697857","13235618045613229402349159142758963381812708105535881869591687777624118403177","1626767202829651000839267637161982461589706191864121262618268765852865789393","9987838342324917083939101879972005695782333488744615563170817056351576672263","8740336096211123959812401281120038922837301355167428721280931513874854753920","17491819064343012787159429200480318856444026869988269025060344595812579885298","6748496480571095055115927690297627803254288462064818297983124663989949503573","3472147211609034845087895063598471239369679263531303811773095768096661691846","2953526140451658539331327853055698765576963371276555059541383615438453289930","8779597663755264042352775474282524171001513221034639917069705844245155359764","14756709191169949679682215349287292071738675295488455669945662038051457125058","1045072223840725286370614508593942978401807538903209650218729940649820579408","19671453664562549334600618870610511546051545801950997683793824512877340168773"},"2527978116713344617574881047138795978705725193283704879226411964368879549753","582042756032812785356979572694686093130030824032283225427425327712581336665", libgDir, gFunctionName);
	SecureInt a[3][3], b[3][3], c[3][3];

	a[0][0] = SecureInt("1038522310221159359826457798518734666449916418767373875616966572101073868540",cs);
	a[0][1] = SecureInt("10023400208728732253324718791046241257830097089683544347963014382503100684194",cs);
	a[0][2] = SecureInt("8900686507315926357086720272001292441462109126557946816037996527474683971957",cs);
	a[1][0] = SecureInt("5909930862539970059729025251362546652636398829289502360391270841297540385627",cs);
	a[1][1] = SecureInt("17595683331102001270107558933399865379782866620593830394691154700789168451318",cs);
	a[1][2] = SecureInt("14071352608684180373776287643279443195582802400841458340614156179507748355111",cs);
	a[2][0] = SecureInt("8283828183000596218629551646447570984598559773638112718329705513721580487962",cs);
	a[2][1] = SecureInt("12833443122839565241132272002543837958194717935102937683892027539386154378271",cs);
	a[2][2] = SecureInt("8209150514104381429653253941495554029288042955529300248001701912312675726185",cs);

	b[0][0] = SecureInt("11408746327997203515569275077626535442664824603065047881164127518318372000398",cs);
	b[0][1] = SecureInt("16900253884980624759916060307311841835301750820069224979916007178529982061625",cs);
	b[0][2] = SecureInt("2497654817996219411923114392925383353825422745029080634639977281397258094089",cs);
	b[1][0] = SecureInt("4285653379812092546734293642057757570440685742475690000633818466208594072288",cs);
	b[1][1] = SecureInt("19433340096645085391282289970003200308628141238382532194014248158556164185051",cs);
	b[1][2] = SecureInt("12114184962884983470727744728786987044576065415032067554291941588691755962069",cs);
	b[2][0] = SecureInt("14218802716201577260005570623578329648931279467571760131918525325412668053928",cs);
	b[2][1] = SecureInt("11411325119936737578914593378335883464050594506148841158728826934793491558006",cs);
	b[2][2] = SecureInt("9153262053576483604477823090088380366689670138183397009429304917104122829217",cs);

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			c[i][j] = SecureInt("10498041830211428656156824490149789889272019443255018072363953805155167435445",cs);
			for (int k = 0; k < 3; k++) c[i][j] += a[i][k] * b[k][j];
		}
	}

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++) cout << c[i][j].str() << " ";
		cout << "\n";
	}

	return 0;
}

