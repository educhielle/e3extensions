#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

#define MAX_NUM 10
//#define NUM 5

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	Cryptosystem cs("38115259472460533890743159428308262282132116466030234696873996481633262284257",32,"1076775193737577534093967438616650493261496371038943720152158865699957347222328549248480022795067643182851029373924853291382996024175623754612725063540381",{"163239237540232193727577354557694741367585507844877323829557227785992854294244640072707202861909391624178708497246414638728670283004433981662664446243426","1268406089132788342868458306565542641908041490836408141901832319262908796260543327799768740539923403782373474409405143348954126268406690774492952906176793","296229978675153435329460098053946960746471878356631848246318705894463408148493775111119725067399109874551096667730389979418329315778832171837438949394177","614219560502250823271073311101285980947579975426647400969518354893143047491145275482646505189901838696970080578769379874912026820404864667845509957831596","97055287131887580554526746366725772210197816218782367932007275583235306978237494776986320749529134307477356914678913350896424033681364892868581740504331","690667718455339990535505686680913417440206729052672985373887648558150352593866277961287200198206435283440599455085554452356081128799570127389447226012534","1278635088619960870006736984360857769149023550662435230621529098419646794798107716876490441322446517726845313508486864739700788159179571602156347149559143","379254446282377995709528630147749752067725948249185388242223948453746133767290098916787904503763810198055940294707054906920768727726016858967386649549754","435357980183930542598114049442603570770628511909425398574314320710589433854419386896092563922269104944956458276478774932607658195954181625171866077010905","954604569552310085984144903043119758471043375186458165857697065492188028659727293385887077510409299398415370108948637782860987689811430676572651726922188","611037060074023041461063231300254289316070623667130916149982481460725382847268023716262049574013970706295040846015745137936291489221309532815349095583731","113333835727736591872299624700340654315019104777512167382730522042000700333037572525612288191980078372984174899865920507390180266732312466993212739807732","18951138234933569433824230310938833367279572925342498488833320875176253548058203974401258676652682666822329646077648579038190850921534006673930543912625","130028822814744781551644945509244832230897765687308885564441962100612589120240166803418515326359330683543631634349153480023626573702910708785990277228819","731356523340722348635017829932199204048056335710759631167938020494706884864883673201517486032278504169334260503962846949188260402206253494649691083423793","309966103061437468576831313361074544597284979295323385034402421338186505161998600572188401971009015694539070762570369994460122107161482680850795027163923","483024152705720690582460456901541586655966223221909772662520469532106475628819622339610911095458347754209238703879924371154773008753801524644529121183738","1182077202141067258659679148973066428020267474494563386074215916794446265833577784617120585162158053047105826568471720388601239078196243141818940369894136","253389665620284556407407597157364001431137397495313022378090944706709022009988709534930718257306094392428314504064042325091719919650333868848641078943543","1363290334369507433726636496035101172321397144086874156293396883317728827263146226841406484915031036977699010001687540201253716925122308066238531391256223","1393146004789608400922184482409741334829905199805066272886820034021638489576846040586453857586124202606337609795223879640645112867052335845831585191829113","989836278544535450528217248723897807420558812150850315214633766054989249787082294037262898972334768559516691331089502974032433524302265579838182971653130","420503560344260668346255637181899306674388305862976783791061403551725088969846185675211845481347613097947549559030921244283180159436343282752029224802805","634291125905401412420246593774382610702186496958583507627857830637880241974556914641396226167004317115995548415979637788604403263376836938590463137126841","153477338432049512360208205853169921785029603833243436567044154285869907423680677122040694076047650456636294336429169669509936105576208477272914932136127","863469566086425112953399048203761935344288341745660350813038582217057099656361549050855211936615262385392725868222983833241853248728331393398463923259570","244893040084200342958863919792124254156336027555160923305266412126217333774171317735025770258053596094870345915395267489769482991072694506077708062154707","503744518013527933552314644179414625565704340488273339297117989554287066039532430635927321757555542859251871966349598318467190890779484831032465329321429","831710911793083860768805669874094582173294778130508591232029693716981892396628965047621803926685410136960904036123515233365118147378692863439009637095091","185385767127534374437191507338373324668354519888279830775344804256370757601004262142977394579201252743060465490436322766439625928681025348032470467248823","934021630702606881020996137881695579354576238208729786347636908978442019331757023092859657541146755609309092579502421469278440128673949654356855196542113","139728759284942945535565861229197011982191393687380340164644071786917377683149145834388678804881349415669864929565805291270139096056735633534833030597006","1305719107164046329685600259640893934881782665358074637629813305918421243433589624469846667554369230684202999047730448806554434842328363332686975800420177"},"184326296397835110576913667186279107655174463452258125285705534691324146492294204024014261086578091814757594997069386745569558134343454430307652396990332","441767800340219531133013845959136285088332879062509939542622010986443702287045293386067521599099524370000785650531655277830489806573944666633740083096642", libgDir, gFunctionName);

	SecureInt num("1178225976790802684157216573989325151550869270816724895913956751288102415210739721051726325522254456439719724744610922859657034867507601657139116035362841",cs);
	SecureInt fact("991622274896818926529731826991314106447424880274020576570203186871572526428971815563023254632293636497208870296336473876451215314874290184752353468887323",cs);
	SecureInt i("160930644906169608902125557536438073487429020690962806224994679376095601559169313705625148873673765403255598300151888411878337320439957445791085757819771",cs);
	SecureInt result("420748220190146306976069355231757428985845758845262515501080459889589115919358634057830196319954521797048651510075263141140596866842983286916601096438998",cs);
	
	int counter = 1;

	do {
		//cout << counter << "...\n";
		fact *= i;
		result += (i == num) * fact;
		++i;
	} while (++counter != MAX_NUM);

	cout << "fact( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}

