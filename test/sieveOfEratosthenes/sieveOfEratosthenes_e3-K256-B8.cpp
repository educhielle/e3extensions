#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("65506146262004521849329043155797996775409543153080647328016656789996393013793","8","2866704755875734345530887964611366185058207585611703383832774962482530997847959314832042908054587237917861765551717241295442910502231911782306966540822844","3723594606364679980016757018008983840253580025038931834751735175640102396491080328485876568213929713994190012727081649242276997928193758295712862852491171","3322767373418235158147188971196368249188021489914198455033757836369322769191137219802244830753507483939455962751000448684259238428714144237253194724469395", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("397864752615873388521844666438932335236974216587131886897128028143910859135143426924863444495389748374671422256199683284511112585167912966272117580848343",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("2127612344891732032986665884749449090621422500869195331454335101003642396631933821462544374464773105402086734780507372904550215029491017775073427910407795",cs);
	}

	SecureInt pe = SecureInt("2605291979553095182135347549208816033316056377372168621449052669843318998460136266665045157327657205418234146383616127982714107863650930436627016971370048",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 100;
	sieveOfEratosthenes(n);

	return 0;
}
