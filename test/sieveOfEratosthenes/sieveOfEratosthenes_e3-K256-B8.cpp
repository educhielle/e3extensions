#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("72777921623331379400307603267891412119934375024278581040258563966526634691381",8,"3260465288237653574592892441386094070629774657385963374095250419858620945892554398984111580769801891713348792319442728454869316659861960484598120980762373",{"4959537957277363234526981364547091242550743677863087296660094255005983980634332728300871358212476176310440029578021744094842885939571034502047824025936754","3303745972487916583213606478853601416899202037030148298178660747098109125081144632048104816543081558800424936771539770132908376416725512555163043229262265","1188491590537157907025037356491176294268119484851956651409433529328414894061985709255391320978269230411339701216688819477375002557977308878087325485604901","1919035381012645121521270937463106609993029131611233739261865659267129612387904286694254949457004560290510305627193256883927701797221947795786750529332573","3290446244406929506474793898429126880132999788308129792375298968849215615799897717868459656498585081474478107701288534462395525935688428528969871966532867","4703871371181689132847399201091985864110944275620271175449577366673911940240341330236737961585288460663119474678684071575583596900227679182484273390403893","3527027393872709379990458173996875332739530623556248462176702327854837149204305128680788452693913677430629577709450487012624853135989740085695138181329754","3027828230332579005262670293828381997411446142080378485545487875575659691436793824370771136702950958159188151477175161993420845774820226982907000910294666","1127757072537237678826559719611140575145180022082424133657525221864867801629866094405513288929707190893803215719623841674331539614067386487975668377964028"},"4053026146406350505423759279542484563817124784293237023399945284653638039775274831147206204870150688168926072266558870242140813230516897277277616048332095","1612487618585527175652137956573215198405019977523170924198798520382546025214469530968697922628349658814501388356457073059903526280458232042881533269770234", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("3994857104701711449945870347398198917088337959452845070243812958213554962083386793755089685959655155569793789664251911200784050364714323328950551990594742",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("5177052033565514588702780692245065803631378370299437969508992130529427151415961703428928873627274068749706060229222070635249519559562503900291184790563369",cs);
	}

	SecureInt pe = SecureInt("2746029978835582562515708713918793434565911672367971881263804852603446810721670926620528534451531254454137822002333065622878806192262030266517117283925823",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
