#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("7244326556697706244919774711817271385964832128315696594620453949670105561898034745241786923798459578120534544276237621659380687834343086120530634490326989",16,"5783130858882008173021492062055088639928099512230958212270486165495001948494309421081681962165248707749552593005513006630995006665566729298705628177014716223376901135041586819762206609156040726878630251236011796766270453699655242804960444313753125888473802548619538102127649756765301830109372071732116114518",{"4149651778104539113078749919192908810751473160615577857123696757917899987437233247234477108231081477660955882426663969198420853123210785830782944858278117487501938565577171510925152949706929853975989807897678120028538918788399507191570945080562270842988900620047523624181409982979683340225014213113803944229","7799883968297802308219870360498938245304042048458645614034601978832548991266016193536672246417834391054312840218794439261441700816072687458817031972813861737238947238719359814919385626294162320142109090116051537227150304694355406592672946793560026811393443573964836855149512160878239397217788388013947935612","17875116320766294264209108404137715663555593998285931860300571861938516419268964647083405480089292173741633113036143530467953839047419034521461559474970488274295969004461535679151784226958075793683248906167446734359234271839487976729501961182998779669713486728126403274705382326710998793754285695989896069575","6565190698265565097926966840400874565094858788583638165289097875725770135013364753360260717465285233119631688897113664584211703741913552494336098850438535619710972021867507851747493281347459220583494670553484402803587135488275619414619332100997653342586915541287948169776591527339069490483037994473667040687","7415847586710746119418853740284968328508883828290239800459067990215138404558223617046533242972352885297402380601925657206421910150782305040516177311183836082279791293259602189196592733431970697923376773339629450766325371667224853038171316460621439421664504126563670676184280740896916373133663541066527381035","28969090789525784484333827632450135659277290478765467458585103161320244584005342166887265912066752841945940570628475333314251976817794712943137488303186979628547877878504589283350201724745095544406862518267508149610229418243514572991426474282422687516950122009375591326635493832633714691472426189836127148887","5095900620683165621839025762104270451958748450654278712660710991857187653333879686391433377185369162581648919169430167671916764886359652204323134771991824441028525316107473792347227738023268029158849040084109182105522683152622424302188776790170493894112158934056657978625533737519935489774267134373592876908","25082864335284141760620171480371076019249688896002366043341400104924219610677432968823047164971560382794535269992197868777192988544749111557054446416856348588315739181344996981653632160234545898312437393497753509119510118372175825842441309695170543019498364040827592164998669726667507064814612894214646112632","9533510355173462859305956969887556717310614248193815025598775418761137315731454559166921939759127134820609552541275163845429360773104550433476827695934577526986480994744744666589115764874865095939530082190305488109176973201630636590747951116090808369221493051141856052020943710612758777424499046280950830317","22690983196289961245565957697824742611062518160995647571677637089665109372545033098480696208665853130548678456813195815778841807818617665396188662384673046525956401539669930465517199205956771924472226526562426690623415779553064788145069896024549194270617022005276239297675410697338235638080152280486274767908","1485880177666695026091875674198004497851257548264037992547700790563109360300546099434754743149877930159339048653360831200574119257262883969213458489410569932931192956706711416013053782891540622236869808226963607462029577915084688941911408963869933579920091626685869152956114672414880434232907531869320177759","38324290746720071437723556323537842142209534404319217199486135383028660423781419800387801938275680719358518350459777388644454391261201131498045681525325271054732842449957817503461696375917632567369939100927643513788823386210652885766390932490248846880696600851497851805725359195622345158106648820183187149118","15423916745360959361114835686018935942274908229293698339581484686016359679957567833342739064090081087625398484687120690143803809328925498100045785275819492718243771582242931360303335633014929698205064993193143566231053163968108320795942542263643098432809131235996870593645219323023661845606989974811137564109","22833587665605154694411251236215285472650671557502097976413329488947453835042215617159856424340215580039481158255769346062670514737365943600480147745249120701431144048231332684500858835310424753252668086728730144473839621371699905902383423129256690508381816318010130560894809641155627575242458659874336863217","19116807855467666698171334604899276107786692265928828078560444960923151801133391254062110320354954732659931207736389929375221973769680630271451092228365327330591210551358261460287389220989103578547864532627243960380359870272265889959886950340357399150878243877698590599339775964701227700527442969717138644808","5599803094921100874229059830563448846171749510014232899579346406279215926033578506383391010319052239603070026886388000313039576877128761237376373233946643598850848497368073197111428910742305465510223518235790413768992728581007235925324932880053458310975129576962257194884294255080692313816098696735376472392","46739893831003726650597964753385242814282325011095142677575417223206803542951455477642084563015787839887848567317142930580112318755606197311664437758936992933598439292628235895396222133705423967013238253324285966885055500734850421438801863127695335560965877217098208046219694696044829780939788265806458545302"},"37720006227084180150191060194490802935363926409599429386650872158138908848417660297387904725385820015950296194532065065008763860438764523582175608469949853087339665807017440993552831298075428288317979732445440295591671829856128012872904549287030044664572366378145234395271631449962248430701436486918125234719","19930241817079559104879382762823377719026813010431012060077080901093052959916860540470593130158282033454582164719337436934442460802949486061953578103692988931838170313307053306256579905570239034090620763477901554091677884510230412533472332764572738100008725620229706855935114975857894266935825654616853719517", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("38120562201921165971820685358846248418450983871615059817478325699832508366753610925988994875186120189495777933754712588595269450128180492292778891225911401769555579256652651552297122018087831519404003492190142388880833473127787453449140765040432316678628978245831603307846102202252643079592710501867438956947",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("49702191236391898483403150094600402147131062147634341162700439752969183199473293621149843440509559018702128422104382244414648604378645067583758853204550541659167444525581788301575300468469936831916488079296538752772910999482590783348841069982048778493178324220863058354658163473687649636584170433037329062458",cs);
	}

	SecureInt pe = SecureInt("20101690511924464497361903903860481375733341642300175549616433623019586502482132872198495675427205757814602169789360004867629556169189956018316013676551220340756020753921117538101890135407772709313685251938361937886133362743859663667949855689178634002747503036564564851586156899920146900907627747921450225857",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
