#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("67060179700621628215889995226349584294853694909655365508899670649737034155581",16,"1616172642508937607518453983092878828459781943809003221501998126674742279651679605278805013415769438385370863715808544103477476424250394348455759210692108",{"1788466262787748231376040606001353249586422496858676519051278468853243225474550630706709454260298760151927749015565590014379081398289751890020303382353065","640386425821146859613671908934091900610455516529557651004685641241679956542888631458956311864589077943041835580284338342246518641544279702240070917029494","2343590383217259730073097023325457697091427756063050912328406734019656126954386642339163786474478867517899226298241610693087335024463642906907823644347656","256225534602324283695936576212004301744140480616958764730749250862002270080338533434460127667805875971645743111069505699986290249941629147281545907375031","1400322454109628086549087719697250590896718048586290455988845887816933254109839777126016624746190558659469861067901751465677280875622102288601590770118471","3861394899918026554428031942293966710180474262776681434121339284998782537390036902058861768610372646237582676761491306692614851129119757660779198455417196","4134202328430417677079508295081936074820268636504326069962127860561618200352010586542421511456221905189520394440440752180359457398199262811192263824929452","88881741348966183621498476845017238083585202883870711360387167742991248776416320058679548856633341941721250345795545526386226236080360182312086176925212","1129334976845767976232944365083416080316433187662962905260536892583594428821410003497100726488320643453182465484331494885034553866821366067295535790822428","2727825613085782958462029048532232985079774086406018694847958146288592505306969363413921840369137412036714292229269427384261594631318815245382096175816338","4077343527443092732423817005874053295363748150436507338624356590537207635850334546644497132125705412436932780538168789077517122167742504267994909068876466","1396194805430876333563797050751341167929877678080724208340579181361157833106933449387501382434689444739385357390051821814844068553229329605998535147450958","3012828188380508353902772219762718053348289966026013062374436209913811851274283117937448386224810426379540081247902363166368630077554023657163729850447501","3381381423526941681682445676222608406824636267925654902156176272286827659200001197371647500328197878773442201825620228182189732739363368621351221951957499","1375811281801848282593096190800439337194588985526971853970733665854625659009197723888419595768394753272407589046773461891760727766900967683050633047783287","1004933131668556926579511680177432465633015346541257799645379108315425066955652781145407185927164149006325096830653994469447576030904411645364836438632037","3082046239237248572688642529448133055725465265976259397996934499935200492086021056754386047805565340548275853368501291852055900225968282011504064525901140"},"3000495037365432218138883894889983635154679581273654761773229942488996862951808075125530788523533071325394335046887077781288556934118518405871671390522747","4091401931405668599721013556527656867479870500541400484130388438227995208249007686986155411625114929147822102206266039330397488417958499304632282930346312", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("1067231479358679511337894646709714782258046064865790802466316127583588989775847713060029414110464268353179306729293589825181398759020322801228349474358424",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("841763048479583635095633198478110838353929400745071743895793250725423271189656155472568160580638651053477748233627558267785438942879441676943093243607090",cs);
	}

	SecureInt pe = SecureInt("3208855348915048013123380442505515239672376287163177582087392715688337739177720631143635832604401891969604948743378329863822657081116314909204396264588665",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
