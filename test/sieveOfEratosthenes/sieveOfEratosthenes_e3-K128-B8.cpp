#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("246993564745342883307795632298648386693",8,"56826412581930127991643682735066939569998688374505771211972613772769685643208",{"58167679688605240173909892177205992797187252626165296032166581621697481772100","37938506957079579584005563379869090893215670425901169779222696795113179962903","29988665356777531935951764379283367810521381481180623665892101507106283816431","2344290849812884782674106564669377939789175597685684981129302343241457819582","14784623958875975077895219287268785005326874552709972958841593464718954393278","57548259031421968280326959201679146002166417075415553132913071957672518688008","35639483865228420459799423846625693126813062933106883292693913998016862327242","2562611507906800595241876985214536860171023154185329065813446699778358683354","53231372136864678620909069549433926316817274079125357914895980510828049820129"},"36644172901935566896919057795076386550161431264812651201884626363959561017336","29507182210086297155880864811137586172667058890802363011518534815767595620731", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("5889599582865140932274501883474538235544334109785671764746107498137507349446",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("14557074761684702573965824544391564182201429744300881092236312280434412110178",cs);
	}

	SecureInt pe = SecureInt("31109744528346810075705778501573460848165773888319926579731771195829823748116",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
