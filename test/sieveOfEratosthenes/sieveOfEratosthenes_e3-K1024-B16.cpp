#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("77657154331983400103254928186265139480914609893661860137073786772279113090910150224487322738155037480436627971781025988038708068338165644939567512691645874639010869029028654404045884578433721270723097517534378441518928495915869547163778671565757723952566943867177578924786002121111890304021633501517210942217",16,"3915538806260958755451078031063893498441965435751153791034333818047158542728629197434391790237081686129343015752059967619579863415864222857697329627172890993843500007818978798125658722355786173001561747278026950430307831953748749537970234050803452940098561020534569515419757839286973650873729857182160672209306006254036998242816894819455489951288933106772977305392244176931887960010287700886934784124396229030462433224453002728197036533604174290097565541475643997983788467374340136073350710395313515082990751542119132604756873473816526935989013746232226074929617213909697441735894450457115239194297850290539583004616",{"4121348390391539982964485501589060128896789918396599995649827713973816547077339740420898965425799228459093721383974305120367628861158555239853656344919991371980953824579198984768456294737599030054768229236323779720707172998096906482854627126042631574264496233438494840117583866839035554542592070370026637104038240181820436414271653988101465267900651601971773756524300847664476038720762026855399678598357666744948666310845546989175126881306434256197359967104930334806036015423028165876755028890895257987823896283669961412735636692453004487899525872386510657098278520358305324264363844701451165626768543561132160792106","5335628717581236934006367427418941652015951848805307238385993697220502011273137015624587516378376340618555236705771154637009410825203921648206420250194709579749828413190080209857853549444599431914091725560106831491163497787434655022168424118471367546298222700440593451253878217171360126697472301589573577566370311389479785395019476928515564671764068524956755114291722744159400616718654301982569071491421353626004626882759627269826478709310660630135222641767250919679005023469897704453611525104382718690667088720404728784998082963964911091259130099767401085786560690996273757650688101553225768911895000049696604461475","228650710577212716954950802724102812613806601347261830034137924508531161563183821613990332087631677444205344844924718126198074190766373632610785051086653255361119669033968425256566131032005391756922186273817429114665925377582272830056953168849127960132297116187686850151367235495576178612297189963018478511787601735252169777981631798275942052572574816788744791875021807835578150326782547703282679793641451835058328513144250439792205552920703653887576642693541827371007683841828555880265887853686873569424966669025716796954843781821985296560413202248103728300044448955621350123464276515256588483155714632942010774855","19355450571180338049236286850412536603195879647446420038112326641737603797121120883565336610736181494061106962463782469280137736209330281386471361868261711191003279144079306783401920493390632504663913940890911973665209829086483739325099832823055569810650863286142095803311873330025611587176885816101917287958062269640551472595051778162156031682758780194458744846306115934981618962352420226127731926142219454082883943633402337695963031714669319077607964523697312341090529324846749693174320594875472364903610230093920172266019018047297041753937599083288550673990256562007910827808021786483102226666878027603166476650","1510256822789744497951499467661857754471437427513590268838205434260251566962218481596044993010995450825347312842795468449801184840368805274743245220525768750621875195226389945810252990283602011758410326087021047476721125650523239922732557629402616959812714886813927469986552044579179205721404243409980401933851963148746056772060335730076967432117060870968735997761959523780028527794703389198095747187771547906804119679522036581338821622629949168939752646329343315079048086733579361922520245363961745307409277827024648167708164909776168467766193207276089601539854983771015353744975206382082526235109528484355815503280","2126829942738571735798696837480034372178126127242142276417740113673834815206368414710286491520052026810285302143485358203991874904342360119728550991762056813407145137351273655462976128632565510418535960539982325728905614548500576149321391637368511169531747970762008515331997429753539804907624421916323282222548925282634128139511857556329410222018266632965097272811856673390326606255267108741706331936805670560601761186792321667555077771131862294220865786542204102330673775507539073175012527997205959155601213750866579863937670095054354330832081532907127818476417596285667415152870799278503044404850844528692250363931","4233243929240772981097437222373380884517259725550576596354591673426596746942882101491814891432466648824887910704754397394374409679700813096641632259247410031670974640664174622138800514256330122840505541553755474435947531309941650907661329222204880446063242370737510588423234425802754278254657648241720053098679195962019816491320425436199302950368821243054687945691989771973243807392150693758143266979369471293859998634805776204841182287140419447806315845324171551327253889139084015901628709114019692824211731541963638137083882339330071203711345699974938405008354387620195997300136872138317359891153736293811751468436","3273565776363189755959721876349818850858074442178259861513897550418089893491528752150371885031221794088998279645147447348249258688336757109324832432733903540912742751202340931660388718201153033158913834454138188090904707419844975371336711916649998576086070814408529561953078396447887449474571659146190163454373494931999893967592909228103491268690694765272864999808930437848278326866050505504830597880627810715260364109714024581371146773484764183193530363928177955538620248350746677131825990441094071687441987413241660003424340369675636657277905760754677656976146525012203048050665444826173569252723232842613684158997","3573261599920038646765381917481775251273094701360220947175910133150760125970140135142043072256529300980586132504148347342262166657660218109085773234629422046764492396387615766265482680508566952124986560468108829884892564342454046963956794174102417548253931878537928489238295319517997239281690782002018963731368713818230209267545128177121442323623291906378331473904145582065653791327152358992233721399075480064022664525447923339258695071053426967921584701223117989456554698321850026412964302571139208094989146289722537868321355909359829775206543349521799911180514669698568834026642493396836224641176116905660195879906","2861543034129266630349814339701357418039408810575282184226548442741568986043796791120640431726005362460786494294244635068549548663385612589656147569215697778122515954037613959467380104025140915729850092719670261455291309475505972063339512144985946514840555316744836870060652843643853932096228658508049482498893593093298239495058470683412999556680029864020508798142338652530589284976845134411650810297271327915589088964086663628085115116433425066861845411742358731036605430010806613864438229451954494158488107408251136064981204912851751965414345773153640333903254889517532257069471939620983192225575478007965755638635","3276291962819072554127340106169220663687770629296005788708239506949990715703482951794930532899470982300875134244087216099405348022573157316963960748315306586882226826606513097246556790535926333122952289639311387467449419561621223351142371244995412145786959724247873219112218967486929918047551412661219261087272795506226491447851098197895864069870035725246835152793611899387740462943822291125613080209425708912835073527523948035314061079342214478456417286824473503686513639858183538949172745770177385319381299243565471294419890417714953518620661750475904938838406876503746700884926438064281695074101949372663552738380","4031182731108287282543016454645058675874890014834431297616112997613304581502391250707698613452732008122607417110218906082076789874351572538093974072196336277750037592524179000592696958332485813016752047600814214345010069859298890745930559002053686082559912664887465833322826289381468342672371308888005458004925279176073751298626314479329579256711130681300085851469507425270760129941088829806294677162894079726158842440506531556353960061841521192355631769967077506763157975993779916617761512704248261043312429208210176395654519025239188860657247894027409772356392554821911744986998363201048753315510867978995065955391","196661089049005760305820131783914942539415600814752441778916665565731919883361094780975271300683200061453133955611383135960974217970630864238738588450956109941320727244793307096739791356916418654764487721223340652106361676371014569614805156810826597448690350233656761098264056247672659355601912393299277363670688754175544393465990980530040131534320661072620276194025267050263184213528748403724119996116387342782143794588060946163842579684778490470003892342260766147911727832683140977321044343804569606464491129025006687424619498214767828852744257764340371092084658189095456257461650799843441020966356424419309249895","4800007589509636285372584770738347732121639435813751571349414542837475799397965728184464857404528216512654535333877989279890813286371267156435423436027403851560058626068418208642867997677126127744850337075890649295326155794874964148715335364611347142971481793424873344410256380797483034227053359799243970316970029368802048905488570041977317472674399602737283092505784426865650405888961680146505537635224498933811641304977433817202984857295894893853267472915106565501834265161804779134200756835432423938984560044595105358445804067918981856473177402364650316109666841985139330494611914329932279093967184504917069482173","4052903709504870200802997914643946303477819064275279133708453124644718080994265153647659263157986609164561873786222500418536500764670256482483683277251968736791466152654861305052163899234200499242546852334480296999109793351843116058936482523262738482420470049770669228897892015533386272167282362354885829273682254319843372661828144542360434042184564061788005690870317408057948836735827353085455287523555208014938213603301060095493609780993394210452040613610929710120123860997673276931669689556578010233056048898222574498868723836301248909178253151359922413517070357930784432368820799625385049264255054329818012530104","4876348153083244475845188200354357485363313948020167915462987430575393773383318231316842859646348152913158164349608653302084430436964322128278770804450121880876584199462730068028193088459550028411074667308870810942903183902034951655770594947009040607227844633313562157969244221281876799030739477263313507766467853560220085474794130035667823000501790810773002262333410935914033162225496839664734208382716312335448574784230014053564145121029253822595487821807757921437502578895399701625359868808487522785397139202553743103765626522944174437547078649822821791647556939445343709601196519914385546475709243088994673754429","4684266747012674338247147747590132343802544472658000039525998649161288754641727440854606292932334571445791209115650533374999044855490536172460205607931795810001359739527170119690933316993583691548649584338527794441004777557497078229931859363712315263908718682963182762170824609731109942622431337182189562639652861113927533461963968455389986381937824753880976580897808440193440364587267223815960537783949450658350954066506231774384561315280754267796094475894318510382415735380462063584454793646782626427503555185561026502710160793471010314068803315313084395699282534644465763767226316304704306090770951657020530756405"},"3495195213461915067702394901812251669237144141736062487707765032173005158134769851018381935029208833346308737168608365069936974243900064421210732257097219411295610678174515830626137102809298193634894509826143684590714226398116517889899366444089493918448619013464321031219403187417761530755071689966445920687744998058154002604064040260916705188924660118747520416719794427407182413593611078171189118503102094991831116897618971689715669995781244169067372035326596519641638772716884505262008655978477694801971102769038891880158828856985717306419224978832221492530391916943663881109317032260604030681228539098388462312989","4086145399423937213976237050608049366398446329918034985872902743614082030017880852730136750422136061692288441506139788012798630224642403512807096623281018837586634854959964158738253123032322785659505147557412980760363806193403455815956079223414680433502008355899552467516504193969148395368025854694362119903397512993777217376558139202022969223158030961072638247578165197111951719187145403062162244424457667904446006625659294215742618656686592135091647855153176417106600435399077432243377009905975972839845299443308903760140805249216189460683518204900834015105558839563121946536607467814754881985823518553641328585704", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("294142474667261477541529134188093078876582738202693247031010450570116381867579161992827097159850804945753722701079771194493837784070517059535753519935448198802757829415782148834264807488557362950236543544360200774958473118340545268902811557584074454377949817486132451511417810104771096025748027171476181891863514330702373849427440498954997182392843992048201842505317746973980346318966260896160332906140343237587901837112968729675696908864040545990875673192362582090294760088582855507157398826639681630471697659659821432170859169075363954279327678000174205167270346751505151398473537512974399042350836930355427149926",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("1170108364040659391963002495204731232228154711759011717960455569834521788913704449751453986820484487559148944414979947644183855433594003590438854959895067100677769770869063078517242192351253200141348635715815264477186486483862899588251308648691692852729836550647538744970138595462756752893809976746827796116628521230487725337109587282336962669896843199219756750103371133560706937787450220369584002290282454783605554727433725400819468926948864136593473416194307601240158639504807374509254988143889542330289410308749135863769700486970528506684721910359401808525907575750198964633992059474838551449521453765605484795114",cs);
	}

	SecureInt pe = SecureInt("3664485579952401620249760179005012711762077129468947662385305713387495191598125553164338903189872995175246833772744798413073177664051765245800430824373046927882267128125219751440020255873263208862505514291516188290223229878573946300340194312083954825822080630475815799197739247724988082235104090343720720116735692169645361928608765401588710892538658747504523616831151462193160286619534386829112798491700951577634001434775284080388560635592550729137535677360977680331296689888241947118249990818722528308545234677504064635870417461559072583902777551807268614032219957526701749925157823794791925628342968178651998195637",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
