#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("36439567339681119586701325217882878658821470983117464269422343593403371881153",32,"743429423070249222494702858371955279562330809492896108616156316750636764202170807321212346308344431076440547173996019041184084836162641784405765789725417",{"122392390713231452049818035247300053354404436382063193355752732250549522767067500025549054203838416835572837463841672720981430307327731194291289555709353","1150274182727973896448334851827967542621624094663245722392052189301971973052813619898573101845876650932855005917297293251757428836072117842214619677992877","459117183328675358365017537932462258722357336857167539656097694115827981547014422657973993134457583348180908286757757025868829708076190164036463840538254","774832617671566283118410539055319309220418815038849592953028483708742178307737863359928793247895697640741474510187752265757968982716960411888548275488119","295976085776358765282737737418502800248705375686448624049510668929344930058591443078573875838373835239282419432936896172879621566350790730818935897549267","1276299926503975677313015826403047050241919307484902662417361237927694025757485335620197786079344477062668470725492890157800043839824829330501440351863409","1317792848099604350998371397600864657753441975103927163722775596316987134651061195563448307842245044157200877203731326055844436063061280972555222404037152","1225577431326609410954262471099384825143561979571674805161178355445977451843214184153496631275557682478615477653316244884558863738069418207067489456300309","548030905979574923202178010474362334130733270014898741636521482051614408206105888479186032815556886175613656548462766162406482888069770558933121527399051","9157625292169474942591389357374069238543000187719646280407719447626235722871925338252148894599973508464226059708774290203880071499893591098135674768501","706508194214899916898288985893675712094375026995410662682449435845410835167956004248061754920340877121780809165598137933231445015483303085714699849831029","69881570677725165913618463724858186544647664810248157656618399281257368804855376732375085022979568686196000392264758109330669415736044317189036183938044","108622869989603748934885225875769980432637359851643172061581448862087038523072755525380105294071323174673545566545167813963069480238524915213307756087437","23128615362066398094435800120823564656434031758693521355134217016748583364961633144159079481081878654954337275588916157316995735139037555724914175615916","1032262451526148591926957050035552339529211089001367196026185561435123282187606205535718054751293574714223053525278098098296974771660003406990168206936715","815213581061891020815834046303436355514788112622934120361273927797048605456992574311740559767067237948901173401301063643729903337430412122853449187742553","594828919059220602719421289625671860441658199386915323515877343425875746551107502131988317879498137197557666390689141855818571599839160970914305756656309","133546157099894526713110886551057987576877032471959272671093723847182513616060809149418448127270178340344574498697118805362948462132004974019164292256021","1179256656070521047735138237102604598095240727612245048865502476193469182494505770451325351186099258384977323272888174983309501976721481154195468147391954","729821157148742802297927383375727680751925131673479372979234822533049408436882870170928225956982562366561981115822458767295227362680330768828692165248202","993037850297299005471383400551131691112084499747602509743032015291171017774575641742882853014272686901472754402773671018418313699741239737641902984761352","220808201111056613774842012407745154844590648343441140366742840646574441509870293538515400593190163212138164667765601778883295275766663466652612382084618","921240557450863879853471010044417734793569144754295368132830933566601203221751654917348088172543846062851678684953508891420859562605299654111178973376952","1172795414345391884988588792649221985028407965040831031023129449648706422299921922512497757309984685842722553734948909609001242736722124859155637885189448","1140526026918229850152750853740488495853168134578324402784036058385880376414500127696890275668195415196092567371857800352747900692956188731964553328239791","1142266305174456509461550484312932784264779142824301475734907791228791191920826536723202518104936984246761908033610144798651208505521956774035145770255739","911677225294927906254590662273913594214607181244639910510248149705364449117765259359031571405211450861058232451307286658343264140678318154251103541475780","971988974775481389889888360220831127707070380905575158861213884369145721864105733521900307792841673484329578944165541048416509822823975733729640410881766","4217930162232442284075997384678325299526465191521674002444772594311618998421279774143817516196767284233046210958078727448069133916740501564190284672479","1169109637274013740590034067867609544062212247680038006965708589197913972481291918997441593581354349105599989226911314618370466799570895783366243223490669","288990527152438689975280044802769125803254724075874714519782299085561985813003465368733911801945598641873945237244944760968431870516484573424985804798788","1027172311964894596350328113278919246920967744457990589728184436178699615249410155174045108573416777935920186027255140612170462962971674753367032646248771","18614986755333391132915913039408590505927672805720578051606335369193580070414157405320663736637151710693038779000030935333555422008673519211778321821351"},"1262863700460980550334610887930300012750357226718932285177383058477477087803088267043674755260242323863776867412924957366624883247881215132200245380005072","277868013631606662543343718315041850710590845408573889407663201984831418187029893379471155194463335364140783525243993283475791935915711735371599880163162", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("546276408381598731922114239437433350545638835210918162796811200133933247148030583894214946936968182523655822984709568554166166167672261670192277589681694",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("927335797132752690922023062189504761793431545102281377433796239744800156438912576598436322164479301527431320029042557679145453221645753872895962322149722",cs);
	}

	SecureInt pe = SecureInt("996165009786187271985608413529282277658246773951046993883785535532273525150023304640902064395153400604144328301675870450100724513581291318084563822277693",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
