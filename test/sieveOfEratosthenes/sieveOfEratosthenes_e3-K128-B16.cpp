#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("187024022950607939708929607803187205893",16,"31724882948808972701807107732801462880553432303142858369327676448931981450659",{"8576499605744210673319145738220154690933907620762665701188843454279808754762","4432816761793979408670454906552718799756115838401998688477084806598434738774","17558583054558488353326795076070096489445014128491953151434620965644787433303","33318584304619417511036322108619300608532703076574862986557668862221693922265","2463324279729200775793449769037613521479511094874278305799427057469845916686","25130199801576448119509287914421020020356515622823408577600567941469121043003","2659905453691062796841834624297018410516030783874303496243842293894150610766","30311413543523729760040055954722841642488223483103111679034772826406826045144","13845157365396361538816408106106950002328655296790181677857122991895469617539","22578702419510041305808796325672838211541708016878603160085722998078247859716","9903063639225021954648027948383871888694357856794309220517040144513946801519","10639960775130772765503547301480469358103696957141624312611712615667594700645","34774702953658770862697886935210124464436164723923883969878721746392160793604","20369834064031994063587511195452529260460483317363122161870087672863705060529","8176373379700499796982735478159981496795004854151642734089881851205779127079","29114572601221613926492174703935156013158752639276163606563830453604720682388","26306378819570615128660240454289124600327947177248766752376066755719043646713"},"10974915868124985895669066980152010067939480940714295376510599867630221069314","636717897420456763102253571925097288124148472660959809126936867974118956578", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("19537521248227254759851304007280986012414392017072910427726914983162185242001",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("33691923070165958330196478270256522882482006476787300359954020732416182088669",cs);
	}

	SecureInt pe = SecureInt("17749433919845138047794601855691431362422633604295267869116545472046708793421",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
