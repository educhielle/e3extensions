#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("13825043949266997394662021011643587749274468840587354014340652477920468378580643979805686751464754604354518473490006310432947976302864308017528637727248104152378789423047236896613638219292182576982490469395609844115006242503561390063645140457304532494944846510934400490770865839961518686333333315748341234249643286068897372030277306832082854158853429390709227929952239869140155220111548970053253230991481392624542928691816638662462313827704631839192430646151921019768646872780373025243413896815314264177603754427168340295963188921857535792705280924664131304580805614537745146830537584932577252078147496477137029875429",8,"64817973561916691500804449864711193189005025393616189904359597768456032194099376743254798382881555179635154380336970210542872764546068785678696290241371342636046958560939899892974318128088154837055027444236820216066067758631041276916759079886519621658756277594696135561051886516734846961942897954218469521965769688154750811585109925015763567686653469894054124329829789330616810395746993961909511356827517893622460834692183206885964981347976668820908212323772274120435308472571422896664719892159648113539313693535925796784219769025928937264935040325644694643118932748663085829800613003758684735183921319095141051066322717099052317951188340819633705483455948272905940426195759783875550126913892973190529932261142458274919649500184294825479207837133242315525036714155708322778000003375703414888307051047940609409215206654032352001148243382019047485613419519756865643067273568033197234032963658493163610450611097032479997373415970020839844973499793569066300983618165788302621722830714057646493286795307027977131759645975343019509456384850002097570179693818155517733869276991822484920625779171426250276443091650505034876081725653320389528453104539960229884318204337248004497050917473572434942764448491206700453376340223960394719297782746",{},"83588821119009543077577463624029825160833977350080416493095718503748877076075635977894744735544329315526563350952368189842153459329775128089721089170784472201456432167683947241802692493164203633153956081219619487136306917466304757768882216030054535473628944233322546480816709957147590426274962721652684237820883028380706305692085435904936426650123557226154656011024979262705469136570195174612047531392471076770262460448492801331090286402626419141947455597810644535681319987619263758595532194330875938891937370263553557320323751611907792536576435539720577960254768455276855358319883004916969910321545783642566680627114745838213573191323637550956823859932352596700912024189838814629548631691329693369055326969607995722163330172924805311443703118512620206910538082813147468669488061279472536936587571008200450587244082785538281753483670304921597397778463477104465288022935415426801390045940050202861578604471881231576556633422775197967273314103445039425967527797513311078968081488555134651055271482510302339695306084821186798203226568288403952838171720707055888585287972917854992631897920452508672583545765196342830072958024270830909413467889925206827270646145441947433954090341919272691650018071787797195500359587434462539025767597240","187576273062285966777675742668072419530029384870822421053450914858369527428538918151290169105787598534789454522899137315308044199306565065014225097790750444102324563493859013066464758627871689357031207810633272031438067851790639057635871564431919224755299188281286626518866662190596322089960132592676385625964978640352450318569668118436981911008565043383823553434369141005191093917437464483633190713701819768598825557648736200862629291357213574066862058484751162264489628727841732667744176313576833233127823220756041036078482471571369583802899238344080759663986079017835156371631620478635209710382926555932942295792309574712339400938554269471423423082892027600296690907165261198141734318237915526502867429071406043981191171155279407601212188212858605300920971257942437115297526749153879823115138678174490624221135921275427197200595897301823352269097000179848754264626806899392792307660079427606029160382355089233991415653454278809302556489946750882007373927638871382306662090881757198830513460582150060103778260775960824738538997970775328389862119697968962811643601023308347604242429779923831183477749218703021091749406418190131123586913180305130674297931176306552055672047153158806466258122730940152551784468442847274843788883801706", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("185040996604681628112362676389723103276448631632801933958936695422344185691664492221708348941954684700784278559201922288368737335526775619995684456867641252028637827213879707956788072180523949667859300006057909978349697587645964671957426693427057828237321824240136843102860167302616128466130199671008378552311888628094146428366370571909706435156670247613375456156374676989469230608712698912404945164676944446314893013922346659978320201020658497621206341780270777029374625389553757988419078825703188195481108728425121119188061197337893004495198553842049614640206495346628269469264511627756581470050394785796709132712986266212974593337908054746370454639990009177969652726744960787971938290754783471083132781015199738970693957184936813440348069272423510823678412995460930503807290313686063809680048161306765198343808214022237848434627928223924860779576901392241586821611387613956762372690378274798413515645704655609846269167510301600141782662102636526374794892043557545126328140038107061323509658341217505085949462173632570630031134963712644923768209874826075201183181213780849153869466448470869748319870323119107300386117314955356567209004955897610282704240402318681135422598673958360412045095905345857259612343699380020890700139256105",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("160214428903496187190829515899964616579210513718791417868765109933205789306512010690292892324775460576523467933177254572566726812680706949881081830112706528504063091933658250417132111388363783116276719222466508483157375073570176729155478997619030659341084164003350902734346091351561937063701443206218178411710003550635925023636105819990362810451187079978946627445591673974276099703190720946293792330610625874462325854881082025959942269954051144477738985441118775904640530987067116027093991140991268646188329522230075497094316818628980387421684874321946746398629238278148140473485074675785688365393242566905665874864659985193739724994556931246684445730083559563618858544933102872134019521919267804269110136426189029531660679046722293989477166137769594981430598837112190737601317337630132894296400930702856487493889284475145984670933052106109231643242428290131400622562255012933557143893644903163472707599208806695160805012417734228332458243565061096503344631488632705065680109248739128205678075059893674163300376357735483212426452591468609660287272564220724937632447223455939368256123509504078048780425058229788001916564829335049297978699050891104060236441315530581407253049748780671043254234253131347011771279201837266193859734967040",cs);
	}

	SecureInt pe = SecureInt("76531859873986767970005568385628772857016224545332989020870980200099370282868204955925722490706882912253239409284542047767620827662968217580516101288490596082033075709113802671469423515145102261861354666582657107830285496500551067562536979167247763986078516607306430709543245133149505440016842207108945981264127031499458713727949858369699245406419087452169040599019968355203425993674668772620121380758938827733779140673367227328107661270072475288919864356623314365339062951119162670623742269441803941003988485160299381975950708716464995617267985779034754109388413496588762284515492468560244871643904602026148484195243494872495718579141156692314225097794914187101857986315158523959659207962729255671643413193481640749601892814497212262235613884997889945855202451520210162783246239339103972824914321133895013578561270021728741470341786555317944606484457568166762770200618924909485187588166359946524681364891707065585411215231993107974857257347524389615266505879142653852760931029908532484816981474489924247875107671957586378477012555727799286411757245944755607462425889914218194047077497190457585856107118448751065904255610205486445488461644060490464155344638897963495939691751077245093264882835859033039575770937577226661162957872163",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
