#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("116498734460045619529870773487013795380405925336799812428043042170769122583592404152047614591089832802967792617347082853541806971144759918679593181456074660493803542938363547669230132081945695337367595155132113962624196086478743372633267050157216255288484098839057524563007924846616208529552547679431840185273",8,"4845803901160417277350323865030587352664254437855759994026967550526437988222897675206310459442133642002829016141330600551619744792691103351119883221989122139815011001975543330808955638089642892029640473673444324761776365512619936258803232989681088414685758890020946588833396255949651875851870220614107821596629479066770658336087603830346802747466906628494855997784915652423296148998872249439178013056389505375312041451519884512876171465838007964713509799916314101120441330612928913645495025461079429375643198466510097103347543162464309437430470044635080695862360641754072134962264648219550642796974033245260330977893",{"9658985437071165370248387991312952667000793243708811042237811958191528203401812686702045927985212094512988952488815773351276604773772802331484274849357275657671678526198257336274487783909686551616750049555257193773921352047617656204139510202434112209604462929877601803556168931585874629555287394314152887097565268355099594025011197408802199921522830604376510137011988752055683926136053915336691298905201887068887604452076253480138640677649256139319450003557182759117446160878759665220980777795228333136005991938172739746111757083237594091826143216397473847449641124304850995275010164063557096324884178159842288308499","3080546396696236027426715619994364728958199387983598343566496918773088639662545822508460190288027340318395653032986739083654642197327394829594502591328866530202293045927251124966014887091480719169649370071092478538424443191165815510515532959955094041835426712185841021529754984613213727572832556601115950438827664812153351380164851094771524602150069569567465244743109220525775141686765328593924568271206989825706621382437337405079803333644285337589459298200133779999389350376858935378943499218428010559350117049862204318826922962109406118204776051253506488090359572765298449502553507800215002656438403984890464549162","935442634803982423909406895439635737656290728006971664950658751566995160676267016474502933155028925489152029113667367863458828004781532823213460870480012354172044871820924523012610562725336193657648038666549281518808677552907730026807337521736039284935235150698718175144891839344242160988189291747861634416459170235588732100389645878377717897883132472328552171902696579481422326452748616663825055775150021538882630736558067363793738133360997102581989106483581322882195989844430169577135283421575699039090009331860259487029153957295366598698129684386911463999072034062409552229896619096531737482068275298398857784616","3529837696301641233078679576311258451396612615490532610872267953862505914943257532814122915810320254463742442580507197973248587420795687757593274831118865305593475118937306697459278389040328062347059998063716121711036232356148997350487243119001013906177034977879743857483355051360734035002101518527665183295072360797319756040555286073924449835588545763165058955668453895607384874298322548957067709705829189834590255547679654571380658750073980930652976353920189828412738327651752131924357493131679693666444550271904644755798260351378352288982019482726775903603590131400288828359754208693644771006154513989775942917715","2591114756106020063212526926522608521886982076906253486839621419183357566806260957401743307963576774984942312620209517107554186225119552949526106519344172548509436997465668666329318333892052915851037890733444145159933632333435542570107171479415737966988857167982985616119911550145418221225208578580215704517285602191637792142773113197593492033612288274702553816481896016451663029166908797073071070684357831399528596861543621034267764641863184206553568928555267650202257103618438949123566908162708755811590708964443280157067783717380934679568950331624909268412362082376410874719962936485862183862563280726974481802714","11906444018223379941508650080669832607747981181206649420607694008016649469304635490991203201470657462723357916517950503775719272991231974945170455107144653083213055434239041416505823867973570379692489238077941825474241126089291410255597502790459620611562073303299676079510053739050192643895684858128729343422229447897978865649599411068694436575629533804683662615757462079960355802074926781922803963852285338460295930255918013013913498167200839879677736274761906530838763655003441157470063410082117822961710647341745839517062605784845605131861921971003933687811910469234049824889955063473277252826376737951984684314168","8457868665752383351666298946861231661676853609164739405583565751098240168649585953646823408896639068931892178779964245579412882284510066872258245073935757933202176970907459771534185713037233069620279650946518171982316320096477131202294252074405370324234908861933120689027212026330920765061878210693147736740582866653121315684193348827141854828093049187942024317703368265679693750560790751163776181767344312309712470074817268363636608134633805919659923659789743377942897301935703565524457074412590962267734969072177159801626294422027076725918347626968310646490042678858656578220569013985339173177461236666136801863795","6670673309773435609802999613592480959456894925973714451069755971275459420190058605918159979541268009026742122453783604963975150192463556090792835894148251377876217441126593057831212585134943439001796184546226227256452930622067046119842731741540718423879428745992645691004978352066776849037522447890392766547082285856226470467957034955915264115356124013460732434938705136320485929110510628758651857686074744869060787143262430256172197594502054537896639687006517963287045388798650376809676576011375006170369061373109101898588864042437609413642826699722822607367015821803809347762140544853849958041988332040026217337009","651936013747400889134933108471834424659363316380785265815210168120498120588901316547398403414348059615910694596062888759594477533727668180170649318621208554065949459173334455232736252965144068172926011537536713783467460493233042588105155439743793489018132345289375878734680575588984907139138341332061476194489411852425079446595049726851549523026251977955876163300258197615852882565621775410050576602148929891914800084471275197063581494465716870493065743733620317776105631207251355574614306331948287575704415073535687476701004155063136754292883515233916987658395840384154515889716656202610936061760028793908161475778"},"13192778712853845506892490597113154494037324704480416861644813691381952291814850271962311923591725983195194008282945323681175170354808207292705263724908846063097908934342094425848803441140702328216127994617633673983432314591873943881207918184967698984418621474375612676927950645049057615027024624576552546717600131707125587295720557266435172388759805188085549123409721816671309222768192234323727790189056000342057109858944585214035425797902142115018429517612824010046101391652975387133830016869142289630725330885196352722507009492497176955432561016902387706668129688085344917323294089180405978764512857698160547284872","6032529244349614346668924788353210397961964749393696320972779176585734895242548184817859005996903714014430045865538390999335056454114897789563187413585608600690084277496059595748943265183627612836003664976496012828489082779798570548761997504157814346529550707965998074713669174881017695511943445056217729381504745054668208513415577324323613341774484563993863644099149686216700704502553861558211774330469159725390814869555103270680743193685154279882512309960705975452706885012467332657677607813423514899724511300714808481779570794017561253487715748955398212066774201468075745723780702506108705194405238312630283081246", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("3003665045778721507040083397908877380512276988355936190606732903534582469506735859829095031503082446641586753775389907533090721777597084917932916519659826585681931772582203158316623044901664468175614411812879784075017254793505740247076125208999299872947002778882235649939534251808819166138553193906946999022471600741914698419318624980946493794748136688804358430694544565707528004987310755918866138255075885791278291263676072290966338092108093086317667484426947720475828252873851742116492192447832376808854989719741812467700678831705379191524411606066928032718330555570273964305821908062131866161248803237843661162036",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("672395977705165035894954459562606521127227459794937593526220224224384058731039762199862031800389793287196240735015720966430712960105385333792377544659636114700719419264605553641041310358427905509731252151127269914950404276552679588633349781989484626533003074928753337829891950265862575649473819298283887315142532669067999815224372069635297080040620578942112185225603510257806747342574552957302420882141454030961394600612566600722929746033146839973754347088478453280218983589248761567314825608409011481430020638153022820941402101311858895093127737357563139616081716964297004260760567468749403135817567027477389130443",cs);
	}

	SecureInt pe = SecureInt("1473428116083481634848587503792702472132050675546252369542587577243844520393435939853257888699456898073564327028601092443481155157036595628632081852189512119219911384218446778470802768099778291859214249331204871508046371177778234697286773269349882692019164844409038780814354866580523009709136042364346608406382000593076094705285625218926522855698497817891071579404122683361954241418989045989882025863305020105619365004561883001312939476043461811288611779987305488911073952300653967637307584468606208793459729030092788514814311128387701938003128615333023576635108034297434072150488866317545132177172562251653017646591",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
