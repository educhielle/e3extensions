#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("82887710971783562608026137316675038408435687361712192807864423357896829859677704280105588940060134717212915300564821948023141941227318167438588870589925017388309366750598067254604934474256095033191491383601231004450262889249521296736541833361027661333428955863820414030931841632675795521571712588620406437181","8","5040631315697033213038827267960794774825911046601973400026493782264454676839650857372702564002947806982894293496218885617066484329266799809866294879675600946864825678829520627418023023924444230416579369499365151604775556785934496506901751501297933502787905575463168719667849819883944026753961952431501867157132479626357672386355822360924729569086862501368872420424380645644240946660693939754930751273458808525036141285642993234254446436115980705707537632151106597514888955207408407578226842074594510339125564640309815417365488167284898908842037605509369848089443714215279241652639417485551132573747295881147962340169","3009573069465921039025694900195007617757425057491484403149590072771018708484078078508742431246128894976046500203976769540987740346783448590298899381382108422965611991179165345132896642953584356982255095312631793624987274467083670751325447257120811637716662388885051701638537601112324117780288798875829915853635608249488193414577664127785719401844712962670614475529300901767388496746866292437183438601696387964398022980666811592245628615150917252737119159097658444305128334375035746636525879404376609736962635937560902939016551079863271171337964668887507341855435583184115609737583172914930985586460543547345138338606","6691278466063207378144740533100186894958673611638279948228868471737849581526266092833526516808731650466131846136314747001087242830686161764976539381726607625458257874179527067968395941894260947993813830503178656067816513495125063183798099988568889910127072784055391237847544795843565304301963506566961822310278333095548220160440930988000292917328383191820445360323571520746852758385180260195110046307040189980045975630546725765228460223366327711045595456092908530629004330173301831727023319499588051121154462233569571157631372779864827149579151238609816769537140289420306443455369442454699095317408897762149416828893", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("2611388967838601145097754476681998395249774948317669949200449075767407278826967182534613617891623651984493760028146766282700546322533931172983873397633186137992854120811326766551378423909161188727824861375974812169660736618114762760425741120536214689671171692437477288354863503608420237187159672711962625843458862000618549940049099045114316451920399924714863449530850377651071283680074796773177044807853064412083172999152947008250698964668815862876215545280358211919909830842513891675602082524906972449912665539110029026504045604418954188854378421113581821868640841102869219305268969922965614740102249885850305690889",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("2062189218593705583979235697445502459591131642541619809949743609293065464181858319020183668599962590919843068015637049760631296299681236696184763909919696554062176423933732443852224675289971714508290087419605534717486783680457425233640399199190112413862057993697412450135968762325393170718291447237515123324807681983807453368706104611290048907139246685272255184199815293649692681033552294904851281311118384864296836789006462776237804430858513276396343448071818827929850117695020154812228993478436236886017698017405272416035883698902814017153671445814034189945616740292153033328165555445220850146327714655525052644587",cs);
	}

	SecureInt pe = SecureInt("3405722369503012793512884113553500044210093739075129912877292442203320645608138806950321578336641089946712684762233218663643167054161770394969129798087282369290018013619977370107531473082066766362828909594892153707075274310805088576247447165351901736440563128425250422961107785031085206553993532445624728756785609043968555676620315086471867440372234290296794372506621896790574345216221155823536113655388740160937812941616046644281534248093460897854166074421022130182175125789311704775070439569818189265558811193771371574388151469113548618500076917882680024992454906236070169543630145343380755408930269738160704430745",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 100;
	sieveOfEratosthenes(n);

	return 0;
}
