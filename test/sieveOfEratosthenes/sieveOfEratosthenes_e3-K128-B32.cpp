#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("194328127449235604797850063304273784613",32,"15629920635096719527688097739128945753169240287612650436535388658453999351163",{"36828129902702701460838106507083901180245584673112968082186301845846690809694","13123215549538310034401202223981296071542032012453319757240115644855478472726","18172521030892173999984962644657560250000226889241776297572530233487486583054","36138081359261816908689774415805968313349513037476098967523156500722969959974","8438391439165178022707859680212159729112238835761931346383332790814055143001","1091826232332205421026762126088755625322182846519763591313748179357346201545","11880079844992194030429361173925576386787217868936868219220409573595585041037","11866944848980860711796869194584703099467700167569338810239582127236939058022","7956276220482766738912113144240322549947048786945008964774125480980452404355","20294453160003889028726147933395266241992248820143154433995278443965353223438","24229865696494616281327086147274641586797161815889163693084425844326794444174","18878047847167949522627656132201704798719564701307740077945115168338630785415","33985221912327552826398550259001812181528914464528014671651567029630346290380","95355598019256725962897599699292802590197631593346341685060390249830546138","29963767018941018504550524807471774421747101595527350453305151581469677433776","25501089732855724830058696361845229265357488404252099302037283119472722908461","27653247907522483894011127709518992665910509055225852983345451892851202214743","11633490090738447039006995856304245643726787248964105806633813198005302375324","15149161114333156872874200631749015985470732079311847987571912724722449961502","16074419284145089796944269936527697065806624722782815543561023813855744569227","6953119887608399167161147788683920726067302514807730712272946576721321283868","35976498874218089803759500343404810948085444836433311045558663832760748192885","11982337207342889379152005068339285436536874288359563521641980928706415664444","12464160111303410930110708559599682501346791405016907681658642610456183429055","5489876542482766456616455719915720299116616678162577840033817091499653734036","7256429095276219877849370065746792810318850431114881489409889411704101360001","37032460029197104151872890515868865226079556963252161464263072110951945782573","37099684715126359487574459165710717620945837615934117462717662572205868490802","3821943261274174163943843534488278034318884637160222946758291691915632384709","1792744347118972286990413489702335117084107121031353009708277737230329871689","3817966715314347640097764480832601070665924632697902810350035066363392137052","21483883345620976702899960736836474202701046057035547911941752429311571993767","4370047536486532420050096261129655137042664220157318077480038171854754764022"},"9075059250190563353892829966449770253453429705740912911604055711315201086752","21281498105818655016155988372725903939439480963304656504624325561736624203670", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("9288828580233422731022474339183708556876625943975835380901766641354441566156",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("37214760487677181116861479097893001547514006836371404633561294296491842828121",cs);
	}

	SecureInt pe = SecureInt("1124075653517891832482630306513037943295185203684172026183549038293642971426",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
