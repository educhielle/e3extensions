#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("9996217297271506921",16,"28548064922144503410540231752680822690",{"43313754810370326219836226776202720212","57328185810657704489346784904480111055","2201194158031715153312147239777171429","61188345941062875488514725165181468856","15025860772433437626909853442447022161","34702732228914583903463185904592557030","66282926805050150280122447201574529831","23899144654097219461283568166070611280","79936587782242179269562633593532699128","21734494266632586601753872816453985884","66871394406858022719249117470864239082","81499182164374183677804608287194456120","12448897522219190268791327709036837382","81106310479034320518559226242820876436","26849455379883259760158416068541797483","22025883704242358414411779363028893574","99710616152247605681899960334474657987"},"67632588670937312461861747150046570379","59182456821166739811393613613791268240", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("41460115280727498062433521659034324859",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("91934984623722788675370465987588726086",cs);
	}

	SecureInt pe = SecureInt("20966909118473463094463425877232547807",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
