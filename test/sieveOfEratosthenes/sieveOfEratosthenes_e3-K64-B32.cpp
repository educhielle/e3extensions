#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("13076644343334761633",32,"38284647662970985203287055466180551374",{"157094698381820698599136752882422036013","148003995184820131929840456777381833719","9507670839227181725060380549351955596","119036788026020904047388352783145215588","30300972701784928471252982634316755373","34688187157143253584194539507317951070","46136129023975839785200998439599660278","167927671219369209873918163324879757424","79706391749211505096833042033447408019","112863269924736999259674841662484013257","85629253614161612081249487995210998054","106961618704029883381990514749392622946","139155712222153342483832084075970013372","79668650472285555566840362490448519248","95928174758524009765027016628060567736","22888360596008985589563644088803033389","141319789829262958791335107825038354409","119055474913376413696088931527558808709","29585325077272515982012752128442631132","9981513090952501867365933289185145427","39352417495641458214395437753125618337","48367367682611962923373726204717947871","54364530076397030493643703273002519618","150641078911155794355221373598556174251","167005558311802022558111482261852092895","82323480223130350243940230431447193995","93760225283235028287606541355519517708","138068757580341805957171790262759562140","98833316132577440318368539544636335245","114448560117472085423467170892676103735","66566178420483319723883491773012033807","137848378806189122821753126341526856498","97901541956928759093541642951228687118"},"159518343200339628308082288518510912856","135123448212183634131994973125158401390", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("117281119557206411833598238413442188201",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("135461528152159014883288836203002535655",cs);
	}

	SecureInt pe = SecureInt("146627238325039354469185472948287447160",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
