#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("11067069291313246566795299174444086089410803583495606727709746039579822374788912801108998890525367000852123763392315879105728992433353071513847576367473073",8,"39864560347768565478328910049338384338261011365299196473529365404432204677976718388921184630021525091402366247841223923604999270160300526000371091382031324775621404712062691918973755184718200448077898267473462620765290965192259108251995155007563362689456994950551310553568861753697434024729959001637035781076",{"96200354249442057437861830414708963541578025042959305909185049571025410749105504409822102643977988697846550914771862882025079682920492083491413389019694707942419572698302641676072049728424726342969183784776072337430786591767145624899942677963740691392907510664582781469878854397477250248180419959352466082943","3755173635862020609637584464988386822250368373818667655032591980825474409122392086869132637674145992702716516014863089397663053473586338625992070996126491258445276753582561624070143330653550288584269356017943518740642855871141772367339826722875634143448168768050199664098312851393534579152588568035317385213","68331428006159780681998419190287870451112710397043388132351985966214760301658360764860017543676158915571773618579509672233983253000261182660297906337858049792833018480769033943841700801609959239843499857234208258857608767076594955716694291246420651457970412774437217179326973051071674562206008339952036323726","79027440462840806819797480464431496513659432157409395035173265265587227468744137426440679451178867468619322193013148006687822059400006888130045675137463155772144264054811818333612517580681504041630094880607722007051676327052892590366933511490168489773282709077364881668487239190774296963299938867012348317222","42637023646286850635596299889977466437694743993423209575804309259222077888303915534798116269446226500118385758203537338707077144030700199736047716588952057331885824117242204130376541991779571817344584704825237620779642558089260601734715630558982870358522922554670106751592718722511285810846480688443491043622","118156300881153458074861704852668226744549248832922746796601655034596701693927535496129398340694397403075426415907686919659143925962055920501890003275144955900320942491950103218221548660147116489064581742121685297733833536736515749977607676129402633367221366808603614691891930345939608118297062638222152979818","45064483986815340350182093554171179396313159406910135844413397964213905695591383009717752226332737800564497296704158962043951631187255057063439561487849339310251470373988102623630620301632645776520399667971265625297200779341602381936840969566690119308909896323803279020722433098749295058435604233816759235335","90169341387275594488084138477916748416622891525241650270966065846342125985102796900607004876744704541648943374896979269667031902946056176746040261474939015492375336569068851649664613445310536336948358913387202358441657582841147335556710644697475228750539804463557249470275305244576990211779030158116751673859","113551694351607319301223255246717341170802655993240447684614613244592555807599742790060213731376204997787380880031778711180343860262543502110148473805804074811595260949584732126696452929569012946614442290516085634693189701089366898477061321340893412245999834720479512600344712810860883103052657823240864656883"},"119194110588069834167306298211420693684474615801021427441670910830207648383921846069598411879834802354146455227135005068200972674894919685020721575506551086894341259482896329658536935688737930349123322463684946994352561946658723405063145458796761592854889016896494409016745115755390420127586197635928889547329","111923451514888361761994808774235246677938071927531221431919042806438073166973775810297196339111848681000450908101232925010869785685956011320245424813839876272076982192593525336511384278511431451686438018549216577864435059593234826909173835791163454990233585839395974439094310813568820042886597843088779140158", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("69683632171865322313997164748695718668004985590398868989287235576675985112418334905490011326919199567119469460530426094075822401380136694129318409159098244832701963418406385071357760072280506716208924641709049605129893714885700269353475592101186732329749224616028765429191215322926959132930565012906302700626",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("15628418805866474882067518839281869270674064716704780198776420767603290296075285366040868261907190983213249259031945141837700564424069629012122544710547156543055303286945156538804691037592616734131522236368401888869884549778029524981568185632880819784321431219869242889616507727094021488377278872228289341821",cs);
	}

	SecureInt pe = SecureInt("114857051476601463157606309214563519922030008434083313768206837519390921342116824687890148589333565884306816073439981883892988945058012845821339576087043837347466065182622547351725246804272948297962118147682751338749101936761727180048443755134707352857783058627777928535274285462613893146068646488491274469338",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
