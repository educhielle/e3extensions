#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("9706891519482386002994178743578981222556882305330597458580571269088078898137498340621625121025573864774990833718607742282735449845789698220605457049913681","8","8730874992276218782863344884585356252891066589767210001778740380130650325963146657303896021170649849608211214201705000357358266968404683438746311614065645454470570271013452436103067631092330844021605366906211655469484955948059421229900136035505865710733647578802008408770385882989648998765540776783005933243","52142644810488826041415297284163885237275284822139552392412466898388167503276754137001361049542930418283980351816591979759694691149336466620347355481974562492524596906635194411914642777831294963078049020795740636524716807897425320263737222059493406838703137193461170307130384808501687847873594967795235685437","43487345093650263214531956010578972596609268867222504862924787581069411240971078556598413760324476786667086033516888095251345374714247192042576034670930342068697749587778587220277910136484762048012091161014071894360066848995679266920982434723314096759120278252277213292402784840741544290028376745863360410315", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("51611460759760157712169744523300947579541102080963387927452512828376581129914900659287162687635631923161806563681859933944125744705219740984870426637255867674833196261159627404342010446241131008470199834908694761943831171051164988679296992112976891435417157396187589427630867878642041610947103180540741274937",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("62009525853307073254306106951550894005466762751424391881273085439844241350643425991910791031882548311699940176925491392895364728539251896494070506823225987263949807036949335786332234673390946221731685023774940591939120211405118524890959876162337868247605370537691388230483704155534505040973562830220657397544",cs);
	}

	SecureInt pe = SecureInt("23361725902636534028859393884230104848271044668496161548411922605557179093442557605242335406173392899602444155680948068297443174609025994156537430560546854977980953178875161433730767146274904758771932830136656925973064163774401011032547790239176035465654191947651553577857762082804050761171409879754560391442",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 100;
	sieveOfEratosthenes(n);

	return 0;
}
