#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

void sieveOfEratosthenes(int n) {
	Cryptosystem cs("5228795187213412097672291526891941915500189773316338867942051154877713311334623768016546892415031965326573833332793130656150854363242405193746291452057289",32,"11381046704264859891863725765435226070204802096788928170310889824004849294645592980932981409506661430187903082837840629277361860022662305136613825362851512906974436021090580217196571241138178782480581866165108166325094334709336519436106323979288272181559590348011127242503083661596817656635211834168552908411",{"24474168939564205146037949690332929628870691386671392095543705107431589372382008695249434888426510744380259257605052056798441817975161542400639097878593409074233748088822542241002124018828213095068743159743829688142267894030635641499152596992749042311770459906998892252284300576257307342048681193870450707007","20294121234576843188901621083174995539803633452781619279127113746019563277178926905670795342830903989898519469808696029440366515643098898617517720365178505330197544841127119578638022576012526525572184837460674629758137878677219474234606657000319515100160728608706544153033769955604438467554314624619712098170","20211053569545006884500559401067315503863219880580237499115838992760745245469741798996718040427199646028003393392476480727542673381351470772399765916293987108431055707186868773641797758834984304603291861079710279503929893550510241073951217466950466264558349803429485393295438707776526706017904163397771027449","970230121102994572839545400276440751902454023315146550340712633423183295932510514331324237434294178456022588100829916929999067536179165239258736914373191290751713144141967136408325048980732338669908391914103210542003182023272269172822143592503545932436418388956746914186712369874838333758689979728234691508","11900515175567402802905522298646838684850611489246942026348567859837164333828516185069075273288355766169259432332107141235263399426058334847611617567030479036624278709880510981862892723687314813163125220920570548542341119428995650515459283073581116763364744234204127815041334683531371154563492292386805635402","16709213740699053774099882901480017170755184825431920581002390674075156174830414445165283967740880057014376475669778215904020234687885358639445921320823366418800196200232153149227956373829168953096764844730899379222261105055087210746961941936243347948047826349192145138989307839264608689016921729318300100168","14767352932040292911774514731994588812721056800654723995273486179505491243405964281989509803875597061522423061925629793470996758219056150840708326682229709999510388485774955265499323457219925730455961719513712654733905060540889602214897605822834797648021763335167420068567220597355471854590490716617524697280","2139188671617392137635641954623734147141453198222642561567635944772100152377380390459768601777521986653616941184495496580363269893369592082355845467591151971557962140727774267838120242029988163385359912492537846791724393536427497754826627541887314465390175430542066405897820897821331363121222838531254650063","23201676807680781444903197393613639039054001876759712315399149558493377878048928723464528100444284709341718264695946300546519040079870617266375570420705716694755414731719013244059203271146400041134674647906803606795696329516198050658616275750255817295912147919162141290847166791685897011462047358370707711320","15942068720213814351358809914729145350999117496131097920510188112857320573469257045696208387727073042737099007975124975263971811182917131198627282215848449493502978355536630662015351651419613411028311096311916134554367050099682151048310873001154138582450565556766506476887410714205061442595592359656031217864","10354286690070532006801950797163890745820511047776921032724351209815031874597147494781398162281584869382814886198577007260718222079715799843233360534799420339570193157069617044176943982016030186746210541936176004763195411891221836242750779797358091634260320260944201533193171449138927881693152966683779974716","23691196217281011377427619676618487343866280951850997663909219150967076123791508988111598702419086299895049139142376997189575954873605887635855810514260005374306826801855607395755322107339774234564509189536994726108395303433413645206401578270038950592206501988785536684823703051384993299697770823407170402438","12382139260282909678561733537966452067487576192106922599231633338044294424279593998441174821150655392764371812022549227545505761749392330055081330443027516414828291922957781566230538790955665275926371722919277021064468686070879065081647722728640853771897610922568151871589547793310012906545904589486273925996","17682241260070620841311306801275874873053954925907917498749624433971562891949621888758463739690083028638000011915999427284946725692597576995528314132564012630381307451596620391566910406038968503122853340553544518937793288260319526085205310252147628472444059477765589302138061127676045582076764593649166304975","14295463366626140387382283448575576499235075602641367454033788120763771833054766972478429181905364895653861680255760413512838385936479034180970311171166685837922960307656914641989294817328519478113164256469045039780624755890533118436059914680701708051650526615210959893365649240844881221981553838203692075303","10118949324059781717439669768411309339231937796820999909362782790364943030541535045518184254764259060387733819085439149794057743837332549766986876002386828000580822013645645756396248239889790387888551366552515184099304383356157693642769991545632684207562158547515935173557440194141641996332845953760550474237","11070377176967114316148245103484004717333840220363888239190686903911589795128306954337451465091921626737037154438598738561748034558195337097159398138548090936171438394349358637891822934862154325000819737128389047697416780444085363047073118486522650892957443245908821388950175512140528973845021783020381211099","8947145424074833383702973722360863226838739055878076451723842483753777042368125700939553991945165622453880646364294167754887266617004517558110265629168177268850222715932211511858462068034395773923409793947006487110191401455195406547997587269634188121929801823755512779869286036113916012286340111889063044779","1189858703071707619817144218536869618492664237883784108490275536697970529486739844298794022285291709318320349181805855434028902886695582593531943580228228571253765695791209623856825844389611264505537464411529074070863465775679384120800702512283714790130204005327516754877305432278312226904768393229586368397","1416826943010918165055177600169991134710757986439541964613399682924100357273754498411518712930004911472535265486316032229264665531051177304750097041745241858090854528897271948697973522979844798448998595509195074638899121891841315881001368389256646299555727580269502325575932944035120690899256872376190689877","17289260615473052365382592376670877871811567367560521898365894902215091289266345788606657710252829956115022962242501238609627968825018174600687251275714730287994897636219348964462255234520863111377626864275220433766832202625947385640484724295207098623572348424193922730642168579079073144583221408498333074147","2247887826010360241797178175008917710833134214104129374953735131584046892324119730143460618127123016535599911004284125313319201150158108225140552672886110561376360347399192827413476400504796396323907109028784005495012103404178696788189423183135377444652944854220088833232569755606189856160932481003395330753","3799633296185360647774335809315533720187842824143446622702934529147999925870796431698197118659143391597353165619213153661596198819384201183361070321164487645174610721416698304515703791575145295105766893863134895297165072961415725613411675744350145484150428410330721896295743846877856798733544613430424575298","4289466463858501695707163935834425563128510636697881372905607187228020601569561061579638698023536175816625100789103943865256893429704312278937831680852976099906688487492454970490598163410108529176033651945699755083608457516987152069448109765478883251411636350176548476968287968057019358137955199917575944385","10829777684364147242068813253255703890803785272813079935233102247176222120160982903936006855915862013593753683162182739237872680911947734631164743123383173075304780214765161843322174602608377283860365259834049047454650762176898452701697601608853268360993858823882428330354386644007750692448342570058022216613","8868243865495125431348460210547859288763002061170968393359752308660470491621881948492790662695723460047849763710342148253589578980732348621843069422034702384955180912835593342091477802421371384357357913380077861500069928903608247652300261065952159655613463064603557643540929510480734931920893055038621984305","22756962343366837866203424196171513006952670626110313857070007380614951603282246072138136849888026575165770738152091901231701556709464979285401988163246868700986134917335894913453567699647322118833446924300021128735428484936469495625733742792884762494583390691265116163693691739293828796753903588542415040136","12678944595128077777138928944417946176707920335302178189198159634129235763882031102515221315339416824121156768438096190970890548681927712867381740622645646439071561153038808348504239880187710215977419208135745479456277551173636654579886417004860042263416207711943682294217610504519616161044187997519288789958","24526936344956766527788493794670302525336141418017830481511900456687504418141920192424601217439754359949034359312820757870805838025396334347419036028690072675713751439281203009218950549026838398329483304710215345484217386868270620175102216511565882640166148877541959001031101019941115873835256123719556932245","1641847017754201448951981119486867339684156994027294526929810847098843788985291757785774408315781442555484007376188590154635367614422447607094575170691280674598670664636900477422995080030050434219405072931231694864510642777853846249610007952107143311161086885566886738185187943922279982320338533343327359293","9065932506526989840828803432095909473116956913533669401283731884244574601104091403429743676183031750337782944229796838070861860772132171923059404133196756285788005435887521670977721545840205786069120530941098533740027132143192122380199356051895807991190840815360322942909273934159065573351039397624540611011","192526043276619419004665840347242510726700904885938242771594470091289896215989683541904304733479889377195236151088375379536659236860863612914644817119952706391908773018988401858652402857872237227692091400965818092334070505165924878672932626533913452930789051313196075947852545060026779905680368977720901489","4521181146921697924364334607386820514088876103667771463701149168231258098359546147632362082706036136974646068203114812624477404805228650062122862322887272184897572044217292862750309372361118385704327704794968946685518884016887132336553113504388850909527928532537497156019364697404540463389493652717605119188"},"15322014020440443780735426524354452778485685258541810264923896114624609074761740699307285344728384395848969022136313549907933532171219603994899225644920136876193990653781742464604664925914954782063539690481602309453110224185087335255973356069736656836001124642762728459297084130172650017474488191289044834288","13393756180297586132548845078169722219434134624555604616129956944208527290836110752035988018729686467843514039193148792679757670487945120326546950554329536794282194753779942089785978013195644681377376566328098062082394702370971688211092962685197128789285700403421705309871311153090189489185144008962893298379", libgDir, gFunctionName);

	SecureInt prime[n+1];
	for (int i = 0 ; i < n+1 ; i++) 
        	prime[i] = SecureInt("4966307709675545112909819642875842867486430756314368328233557020584421361363990122679659305282662677359184984233133126535852381789291351325909954623675757842275845058592106321966913018062760733585396395710454269309330746788033731990361495297770067930829921358577160255641343999477389751524534031498766290341",cs);

	for (int p = 2; p*p < n+1 ; p++)
	{
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = SecureInt("20230566116456723835894995764485458584050057124919734974654318707250304341394572557265459621513011815147020944953856769812463486459303522780564406153292971130565705328634078981229668330963176432448132042246537100069154324372503199628937717355454562363854772527804646997039893279594444407908910791466306737964",cs);
	}

	SecureInt pe = SecureInt("25324046898588119274278228350932550144352766658787185636934210864651020702242025550474507995477151607758304599479988120733200470930075177500548761094912423981174814550088709430849517004953293404181226965682306017185489040806388114134156011294942899667659522902784198575202914714821802805028854019293571664795",cs);
	for (int p = 2; p < n+1; p++, ++pe) // Print all prime numbers
	{
		cout << (pe * prime[p]).str() << " ";
	}
	cout << "\n";
}

int main(void)
{
	int n = 30;
	sieveOfEratosthenes(n);

	return 0;
}
