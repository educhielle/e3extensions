#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("238814524466425507235732159900921134033",32,{"31743560319984944248719523572465581954888075344699266801101795041412019252973","19388545381356540935019781386137438760727354262750758014723699477492400874551","45309551407492642694706002322007421426796230089387089684512742928095950419910","25262917077514099663862457217430985299196050887378173371500379304178348660397","42407285067837603229154878839920645862033677129506575503118219900400546225251","50462157933836950374007806135362228716406688534270439023532329905131349009829","41947777777680789864208474849901698495515927312164717248432952335165399804714","34116466446818232148673428024960646026312652456832412133246793224730569379861","52215069538212697952919547085150759461138943839388548379896155033729859497397","50222053807252558416372427545541514800763327089272647673461958715030941909974","47404227595297027726705154994627913703284022774594715226881265580277678068965","55716921858769128062160947027426183254731258065658596089134434928040996869780","866370094345153729400997089986847922046360733178360790357499322411664367909","17397430803066239998971011828066768204696443222907343719241680027248629074161","3759135746790241895770896791914874425063590537322122682038570285165363863775","11533320464602581343233253287311228738349818095753771152585002279568846590292","35577748772838014892758559591211201558003475444779054609128100648928938457371","30789285433106410622668553412608349326175997187240236491277895503317908620089","1268924764668929257812096779871131826883143856556822009598923789670288051255","44084261422261136918553580987232774396232754490092577044025734561018100421699","7791872682881905044328889035320590680429212409007157124342369362865803892680","34230922687927275573774284230659933110344146064658961027246885132608298120759","43155493554912699771736119313882751116732060769665285558308337064553119518147","43171923209754352899751785156893194582726280272560717697439821146569352299192","56250452830592283330693249732111936182648438323466279590111581239693877104969","22499798082488201404536646090879200893494843359674260090384920978682090944224","3518177467923734479084042032537882762174644820623036217380978673255015378692","21099686068246774343530265694060891132598123906486039326331866818083596983677","16722588294946835514338105742586075410706055381792469321929253164118916822594","20889050180012180807838432433230181576212654908133402885297560324119695680099","11605003923104533772505520091329362424902205882032335874292906832991465879546","18804325632240369172923875221914052277546750686094667433388435234394615421050","25309497304354781019723138106274865770795607582342426049817258603701623006510"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("21203619782319656365929672141174596527952032927142118082732231908384284321128",cs);
	a[1] = SecureInt("24152717678582719648918946200705897249953162131397236121598956051155569072147",cs);
	a[2] = SecureInt("52053951824738159842778754048170366347048115593018334437670511844304470067195",cs);
	a[3] = SecureInt("31375007801894079609212230267522624085615688982305018060727276856309324397031",cs);
	a[4] = SecureInt("23730352748889388209610175720263744471011913093132622065821118127522585910071",cs);
	a[5] = SecureInt("47288412784079380244118197528368844997380113914492324678050215622123078256559",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

