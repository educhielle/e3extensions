#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("97648081240999184596621335453399934500219399800809186813565333085702927172729175359336725926767256739161359037037363792364981577066400052236090626720058225752276803139534038295221737881970370073320121009418381935085976891168832734616351254899661539962914116535946544165003279747574150211063961942082055106149",16,{"6788286099686068626735054807393132564438920796584409775058182192761210101877447522079631359766472035010198874534855559653079027037947198514134093671724226909684701128059856281304631994926042966852950045481446991906691099393874973090859189470607589603219102141051545785716782836121384111447759783452890111427832598616488396859394647982872255237205742554696530438148161596095481362070529459730673441370437026482734340971410719309116438086509200908082635505978428202265771170702650495254456698389296630240831980437636126774800122183637937466167579629210002916876009165240382991302555304128129749395688441189758920824537","47778400790927844745350941599624734917312604322600520764036321710218557798172462281530796878607002112314230352250454255106257605978463582436532098654130982957228088165066755838418668691925109253723357884501034432871998074339286230674146206335962314578272492128072700679781998157994554478371323733965951103926698632713320366798829764676933008338802702917985182679023615634456303544271060314502250292571323696970584752037499850865640475343685696447097663734425583668786775382178495862133067996862331543981120019738417101932277069317394406713046254579612013336820711894853924657400779674000359903788951263170926409046","1714182712602538334998386501673175385521000894808048029618881350433320824457583626329534196287786765821588961863396397914845709020517567246932981250729486076524955613939205660166974843997320336841103057972702634892826901797503953640809132958195357677077217075074206273215118580885542670179936238353950419062520604420255992893808395973456263671015834205543789264604446999126731017491558107327583036124408055207717895804423619589071305504492417821238725403024890776469694227165455671250870618884080705765297133252073401207428672213277200728508407038599812964371619230209312830354401560898939111679180713686394468399845","6674404620220606009913892004597833769397571353026201816676411742395029242873902828117691356020843669087731463757840798895250633856481073766993838420728233776766195521617135554093167592734054352790746965400691345571630702927613028433892078667743464755353988029590409704190094064147201514193109098931723695609763919856840147342141047165715102839843887591263016357063339771566031561219960950273150658394419473250241438718097870645578680596494857551306154525380830877619653831223536528138532555678917382939457329451305263832034225439612555959919939866669863913450184352337297454269842661293765928592204721270462582185094","5830995106190612418557631100593990233488877852697709411921782728051856071768960835614152276321090795909418524588703539171164470270064947470974873271512861894605650427176163130639371682867213105370300904665802833198567273930471453941215827874752648840926327835314802301063310897894527761279004155877739287927583055105197885444740396656071036145340286147059917762792529228014557522417455829385831384809194237644614101852611770631331749332212899412846863957672075049915565782666662183910008147662880300475065203664250315250155260963180032586413090960517336652187608294317786156739890651282596182651979369669797539941620","1488996212233494797213304052150468638034555709333308384476651611420625744002005392386238715327315566377568856629660279652353424108191437801400652789012625837389591541254194881618297967787706513062599739884725460599469269910033033063164215836023662718981726500781474115714752134858157071894408180601507764096096979696206005277483692732882752367142426153331221372795254995061972372602557964767726773654168779808081427971615869514695220743733647223693565010047678309176464148321308190696046734615590979135180584279128891344740158886074178826880753587121868825613789567738142816732046314523240959769194687531052193266279","5702016310658847782300485814586305247570326958372039279688861197172627953498711198208740351847495454887080164335462785385667242340598187631490747624751461213603441317114215997756264800242544666810002812796869493569240237740314615442140897154798619343383443665824810396803096799062897619249762710035177463874297996924243577003315152540851172777799010175874663447348038196125663868959504218927746761127085547765418664305093914743945650261566051271472662144882460610930835049859963654446518553139800116189354339440984339061747370720290285603998376054244667754541434973635179171452301096769580615926392137391584801031195","4164462270087817523384726185735326066685078794473225440349861891187049278240232553697133194598197450679283397932444303417183497063325752155210645337312824559505044198977845829334079262071339349250741098821441164491200497561515456973930482766047677467880081595635756100914263831816709594702989318802586798320965562689112190414000083008763368861006430623949526302259127046812134250067795237517287630204320164750897797067951735828723732186026744995764165698722281325850518369824167439110510731892650941505736729943008795678233738090030417466400625561350295554501739149393317028683845541391715323471765399974630484150436","2123215015057376700877251882180027335892541442028268387509376110760443756825344214423832484347940311206308798178468189360181241723049763230940577158465558068237748519414267362222474629893283650151287440778457079644039771067772689115874793928428516283070245966888347377382273242253828417251283915896054723916512991003631438141630242398218142010233848087114059278761659400196260318799511002012025185213874848749809703307052767161055118965891546219452533336679466022795646524434399714999260759014598396860283292668949398537655630111808132945051386421413520113882321317940912183170202380057478255908055320586204855445477","4599073116981753590342918911194267675048924250134551066912759354263937501619210498139606038965287535251610685746622967195932326618981871492281941990616907609120183516289050572794799294495663544003871009882888103566420934582035807393794351770764784897779744128704364034467060462503782034287265807477249175837793656703007543806056860120668377094656592093987124387690842758882986474942425757619329370489582123337198682950028892033681392378214980644535207603192768639904234106476179094778285571607904814185694039150027405480666707410904028030431552713013096851626026003250987701385649099337767344479840182494167452139376","7105662519839820958264524612728349559711768644544238208132954015714944018125230064569352593119305774152098376457462262245595600068922852187311343446408058838595143787389920874227679404391714197442651889655514073701058287882193267103948857904895718852695093951259079930315167337437345146577696497228197474880157033407909314864544636214128143662948558998833557116355090293432694293379428598301135131434342164706953271135031343324550944135563258022864954432356652967052263019763186654332977991269758213675571927360869245622493345800434633172004660186862273453728312097753079031556601824638128776058442151412611824858037","2173017847766790666303427014677077473138293629316539314084212121468745010007718779135128495295574096898993210326308497463942523176345282482941680525265523966428775823366519185173377876025269561643555459656125875100156909584804383821351636056593671809807004890392949898170125671773287883680614139782432108409833129766973566531984051101782854306839298836833292250433349927645844661002227519436258507818492518164166372709749798980206209902782209322608810341264449570495042132935598434443990766650039472826865302352291087873618820252220911310274901250405234061782615254112638558669339845817076971252290047484378667606272","2376554291661717784347850257249564320448622000633615836239830364856094639033710704077750189899386655771400410661558081332255893798368288676338468112670036871785887284178126486665084444931522453150383839879444039616266576003784977107259445161903717016623888853600225348711413154445386138715161845985930894306885429462190056026715778492615889725659617611758795544105460220352524704832049446507326333910177095496144068180291940236278137230929018329090573438590159875105605938854773817830308169817641139605403535893799600599919946978469125887779838563176111253453625839993660256992899049404852375553120565814125951621749","1310199005532964747980491435839682820575065611362332672885074578207497498468124551871909618119367965921212581489143532236532416339214252348215343102228810218174373614406366703939481245075277890235063041520074776739161258664262832950907158854746233202650632663912939412653204580760986768027242418440311062934541105204009027382300095483749936326145148381107742335779694951373226112132502614600700743050748175957486618445655446864423548410546519050030645848088647417854910928114995054680156050594174134979031475105431626227948436556039677321820940940006326956640407264304880950149467967654496407114380604962545853084027","3866372514099484729418647133861930858039044645893249979555775862802096702273845166863336398855437640304250830384295433195469971794173394352737459849790016037027976247610205117587417912910675120252691998268258221211931259933084130660980623106409484064803969148046275617268590016815614603973694205600668072494093922907142074134749032342366267399852118894722978440780875612640786330525593470635491708308597352183548487624767196075372503241091222364677250889501883012321506098026137201051157277426251564438464821869446161277825875705252937808314466477632563400931175545617048623337476385439131014262096585742061462304487","6277601811316458302773808002983756368917286745713561711998027060135307093123580983550004127048053043930298238403781091771023991815115894608739135039002257381751445563321315686102911598212320586449112165645509290711337478815559935711240639155824840348051606687193336081739841578941212730667455672250576835886570972845981346445104762606878193436968773709688254243578703368918047332207942154252837996961782733042735012207725990037960961332084733130186990273585744407995858134248342729015746735114127592467871914381692217026758579933927435863037074000498671176168135671165706923595378886385636318194668435827025860817293","4753005231174372576324474515153285902165461276225578720814547052438210139183082614856077644155282458235308423898520759626425704386319328976975766801333639584907905929903560082345245138628125825312571628679832090899934549446968982664653169665419594470919429957242674133763571579873542538967879600930240270941363804394254165076971315105245589109626606212060567771504430796636644372049374486168640282467988494377594974298273054828912549653117130176008693153183677023662284641750445160261155179986168188238159778048781041041723426698681302612649932312958945510308701893653974525695540959345327970209690556822117893547933"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("1337036364241305996813622283422725761872980211540581264338194990173106461957048470740769941493181514761847181048880189082423731517732311798939491962898036199114797989900963655008585651679307002575194172955197674129281996330865762818351750442081769671190354356065571934547967336126803900318881456097921950097734403403826022544104014620115040944395925796288411390968205014018337317819827095108478477312363249644470876780785469928669282753260562942406280001074111890127320769899821028136700083303214292268724144694008274768858170467895386957059323527613058122925446404099527189173430044530444408571262996875678835007063",cs);
	a[1] = SecureInt("8006816724739302745015711455464562826203187854095920158911502829417660672982111026478787583479914059745255240332246863626587317259412563891709522981831785106336976563479486096523380224326901901960566040067509430745485950692181856060470171762906264324800345535280495488640225411645614700547125752393393834699789810247739957144891810176973695806747185561228820972026851392247987183582914919013220928877769622216999057248138382468336072759482557606485711686046500847494717755210595896489864983578569255687957874290878746459841476097514884310216127945659248462775247204116005915113876403786372953935137769721488872417013",cs);
	a[2] = SecureInt("4223050252251376702748525951223252601040673423783395073226707354570159611359317223000462199048885228424033461171863189311899079539120104996415533595250560205438603847037193609674460854619541716766183624548339999063859671208206532774876033472372426608824618067265150244170980043414236667721565162191847704861156304052906195751648842165981060356114650818613628793323816974257378293649489120641251683209387945090079584281053390641508820399072731745273807525669306528165208261170565321873351905820752717682569507762444993001938650693690437950104029600373068963471441222647997300534496720297892155501173084976729080432584",cs);
	a[3] = SecureInt("9183274554392214656393641937600311095795672479591819751050041753687605425535927810800278019890924022331698840687591167393863044654506725867953661822281759165306466108641311049394638837123435031670344993744205779442446551320725333896378952678689318756997058008238301968634381539266189412377856830943334743368186705517849986697245433379692528035450598645394903322328097379729314554489039008351391908919873886076739970513690098340027965665742891820861890082519509923903250115889400719816711243757017231855113131146283982910467628933829844170796257880321070398788466777224485162590816320293700338259720442965823479872839",cs);
	a[4] = SecureInt("1241331846127450281074997734901690857254485974501231910623368830176867255321002205972631205956234586467786795882518069011742448400922124481136005633645661686040239249580510561190050174332177678272993807076316137523147904028001117357884031913851144301190006306182777685772493608473455529585502386883203528646846926837625729617860436066696120164184557909717750184734982664085564423324968497349183871219144885640495531238650066565131439558857822893856208671060320392474420133523442201710453132338201125169059050990274963517601561718658078173279266322613110188297655073117453321213980424542143300355573750761620874272357",cs);
	a[5] = SecureInt("4401354620594267520932787770564670673638387221422930256841016368263927642787504447835339372195045958532965897152975034782854198173426547577223750138654157564807698012398303508580213671062834742397949144415089155479206472012471246424117741113505662731494455764754515231358374199491421282237882094790271532253257912245714550922041170545899924863942825036166112691600336604136155201154032241395203055798974064541825178781457577245850059300865189200839966498337741347582241766009694916162609243054926324577931804738005360867670804034291151039063902632403124408670606411155709304767408216092398548469978991604886223852282",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

