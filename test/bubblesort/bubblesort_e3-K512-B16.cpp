#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("8292948321961096455955509622112270089370840937122151005056360654560734780828093025126207732248906640923077377943234668950839733252334886185938942899130953",16,{"57044381887106097158459709905217734470861710992980093058187214147412900490900576891367141215828308479838654379719973110963621674673990670884958934435515005100556864633357121073043020186674647566161803621657909904139002917554458816089568077582961345737859522867027817722307556518673028661451049884356411760372","17548447595053424930950817852991021257818929537208189716935365598817984690524851920727872485864435801086918740827261489781396328175017209485374087041128232373382618224788798656101395930793611391952030724606757352133278736410076885700138145327715142838782840079523907719442057831363627397636741986644984442983","42055654614821697768070655806426793891167321475893976003945427377277551207529426366405517860526382532628634758003284282986921338132313151708540503199428984997626089746508729324969499764393072036026246121412402381046473662600683536767268481014154232979898554457849000226115083891642608717040942943081361643156","18732919930855657702877369696442939297571045238809120883032861742991764400527276275734460878772254688483930496595635618257131153239462389581906017271470052817717693042460609808306287989679110334436408135795920758831660628969761829363154662291854411624840694587707146717558933222897025007105973584476656151627","34325596971518361087057983147923327041758199186988171016464142207308139759584386497579378715221719386547393657922828751342259842683283572387386439083275417765138584142178745109826162808024138622848202556749022304910052455250360781523975471068157397510256987432083032798617294709408955382098119013556914017915","57261474886768585925540804454199998491984014610426443915696175196752311228920843730897713143151028886399014721072289054837164619919484480457945118716464415470123225015285243204526379623836743328147878358923669382321041094288908556370475184035035473741208370619157700651304853902547451674396873667427074905321","1289937500484683526997603399295051724360360915018128598509951116691758899210997651487994689761355963463141728111188210761240130116889870297258526657720051156479165108948180870770835563652755620042693638128029765855817268504666980125189769658692864049831111207744999700081083858976594839045618389618551446907","29323320538351227931270336277264477409008864620814175542931944557102705151545925645274610638541309156719249682007792158836011736676756133587183681862138497648451502023838881193505498707493486163675586034878597474197944785170518781172112984991514284309209440800694102583270624457282241450313048259546673643397","25390286363920203986015026334685198304868988559562115101538698289626966419015794270299537548094893429993053919052775506600717060225664404996150119082564026097625311781215853211974055852436964759796278929455292517524292148268901884108987843895287057931018154424227667223415229842401102370481417316052465980159","52170076697295927306498399231166156747748491181010629936945371146648721519065677133769476342248062302423239917946469169309459762864873939129055435408387379877788358341213507046940630570764834177577927021937180926300730030147104448629222993658298063622406593671917413373929058860233835375557508139238479482322","37037002654003980425890930103519931869803898577321686013927290367417165469154430976433976700694692851968735368700957293768336666847689918091819544852544235805598036356769810840756471160532365655175115801436861877639458692385926017829838719424467264097618511819115019091882639789564751870326047877543001635580","66463062782390500782102829247216152756716517068164630016809319782016895272555856523701574698141750343618904841498341036079789451968234882972537097841696475684169794101979798027876945216339767898994174058546524302283515320024080034224592317410322834294290536925196107856694611534338864113302277610886858072746","48882608614731371705971860677718751512971988666546210891596538585020455876113635755031467463351786924426781422343515414141301530009987333506299512842116011824538768841035890025443680112515609088002013794158182825951279713850303741130797216112848931500339532154372132111276707506778751825339300369618423893253","54069896935383609982044962499200100950732126777756060523199832384424173978802805463400599614814384254809057713557802659434544789662777547669679420748075598689273436339182215578948379513374139767984040299793988877453640102384994675589718109348662510288109247519019802783905244775508000118179110793974996681923","21319033794780844206756179867645522186900217072764420704224965375129264117191734392819523972665888652854810189086908225619163981174227287181287358917759374360127606651103149152426905201509042974973834425612133013229272778308617263206592285422783892269286141398738543567424681536119718107863482748076316939487","64873594809236411955306504476855250900164595436161517521788549929453544327411913736660588387385738728498843902352451307775963138060140495132300181559448067347242584511754448427303600425458958494251232135721000338107735930784441131323294204624742897226987629818540007307907395911626725270015175587027795793780","2158376916520528890240391592814523926105807553541954354437152174185974634977477174018523237610557711560321023634677960236635366647711313051682823322881870572286803243542769823248783263736802000336948323212516562083261860627912569445405293720982571957195727667769946963173269528804184674416811048404887836549"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("43844229829927493809601179567412901823409683632557961861533809264095646937782677056403349022338821361996256921565472027485106786189158910098527710702901847055747406894398361627479534056789246289031033756371354523144593517952176942528829372040954217157763939681620690098440963725442908548974278990695879121459",cs);
	a[1] = SecureInt("63474544528742399605564168375077540867638171000231944782628995343006426001418552659304641375638222953954493229376487936148228075478176029112452734349330985678940771260239327298087069812370756481336358634394408490046357810629879273413948357545859472274967307213946273262665842732931418763273218430907434821950",cs);
	a[2] = SecureInt("43124843749990839362186224543397617403873061650240912407152316797358938744104134316563145154801348361103818417029077381544321295405964052711174326263771447591766080196954808952439868235907141461093498920639008758386238635291211421412706533888553303041598871325782641841138159864736813079565590977391015528307",cs);
	a[3] = SecureInt("52753304676774128687190228978174910706394203952362158583947549398763952464045185688622444602128690609845852805451118655665508898973837108073999038500795854533932356409298872880597690791562010383479663355416681845469774711351918941779854861812978296707035912848856036244684522043610053125791876329956262396027",cs);
	a[4] = SecureInt("20644255184206055741255534961260904340860136481333324219096763700497064196479678323944164294914238573206228901480371652566533671391818138604966400671817666197139514552797185840625772748942068789188555161919279867912770145812453585397833422571352382413832389888895197067473573245225548763859607585864250346422",cs);
	a[5] = SecureInt("54079690385112388376416744782832385233544643134086927777101511209883301325054541640791348880600946151251844632808809099482268994484417263348103144456955230582870233387174460238627667739198543269478590150825009271583957276063465399408998568341688557998177695247189627075936842858043839908568534185319021338285",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

