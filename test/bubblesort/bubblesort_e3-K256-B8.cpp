#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("67222474928698042433490620440268605734559984804136234278513380904349667823013",8,{"276958047953222216207935703899249318119833159753268068336167105418725745140298106165173680379513557152073196816443622011778982573500750561214469155011667","995812720259302945819998722422506737400205562284577336724656031893043463612060974815020001235964210632874423409748366589039990073480265831385765811677505","93839323183536962831369553496232622054148923775104269612565067246057748931295412220323193121208653072662170223412122259089056428565450568056013350640596","4496251736588524782654719868356648391980028856298083237087819887892002377894068060098617503242439726342504170811065924193851754110441214206233099580551754","834575188637560122964052657320314694151648450121894381201842207221912829715632233416433780237246201178081405415308363050011644362862821890191712156294725","1437106196217809753930315180172309134333902118026216819172696922454514583698918963279757309443923310026088810218668016029823083881611150890090609035927344","2747657700455243050618236083216758909014947183444110129707796853886886357559195609288677159168966015131963028703380509277736793664398320668126512921496349","2790219288907412478268376731844550671265520022630411849857463960923476717829909023244984759192607972740132108620457130488149819718633519919230341411269896","148260361825912147117026189422661500390453821440582786499274454774393077445587948885698455922146182296176631527257714595050159510857902748995081980263492"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("2943672056407847814105822726570293467918126526664581028286987366343627121840546814662061127419712815199438606547559784780759555120514178784986156038120416",cs);
	a[1] = SecureInt("438610434938371747826973524303752206230854483197727744385039582103501853336972211255746247501636909042962789810238892757972610122616998970848370555691911",cs);
	a[2] = SecureInt("3393871394680828436499482848405238928999093940480459673993304420767134640431981328731984809596232783297851177534559888895853378324196224746709864892142039",cs);
	a[3] = SecureInt("1403799384599595467015327259562333010856006992243849663359485315137327305371212857270574085477543283433256964646074437982018686945695117473878989495710881",cs);
	a[4] = SecureInt("303689800275251377031978257078139524151713323985351573401833558655683264161586822831821901040418725282913286806080225949276521807634956719613171964694722",cs);
	a[5] = SecureInt("3366551701779199158467707009795482311876551562186453037333278181690613870042853481403057718667465608345362475733416849615189507493146077582854976037779749",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

