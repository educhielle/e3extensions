#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("141524748687425864059272555826755376529",8,{"7727404015462295895696377286640591903567146396656965993422853579810786441823","9074848277694808147594050900080165971862285815552667514555778971402864365532","18840467281242272301775988505846683085580178958568359617216614613498154164402","1574618095463045384632007199631551371574522384952683507367984149079870399","6169891726701483968452332789374485142939687775256897957092104746819057393387","6338916450811397682105736569358681911741601490999548235842114012777801078858","267451845215359283560036654226619596343379562045410945273059429629505455818","16244765117288928983003754092216076082867516328136265605502998845920118273048","16687370014376099365148260648087865301125743154724700408246199968007971111674"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("18009751968689349272016169167443407453092927130519328684236214358780233021465",cs);
	a[1] = SecureInt("6087971562006435807400007165660213167877193116194786127498821134667977092867",cs);
	a[2] = SecureInt("9362983907465114869251288673034944061140101659282931304908973430662426589544",cs);
	a[3] = SecureInt("8020332132290501520246217223019996747149284843769976336033481278759322733135",cs);
	a[4] = SecureInt("18676288280071970607136269024068084903234225929168049498112666138452512651848",cs);
	a[5] = SecureInt("5981180752415621803470518601515518919456786772371397201590441212565817715833",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

