#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("68464606027789901123346658390747865052093096565138202807144123290880008227541",16,{"4243730424890048846552695520820197998104169790515016707168011528854816096688496388795079694820871581209212305888261548252705366263408979394741985192488009","3885774463931152164729364189053332390559007773644095537176963535595297115380637673998097424117108125033236308297265827213209000755850244213157484093071273","3121416758186018178424885871849586461805190789984277945601066171206489282693752418136415878013504097128092904874143535771796781855634319941584614584669413","1088612665033470970512805697369359508397867818830732955712059867921940413265524618215242625873597883342436434717628803699036949469658540243213777683342257","2625458825423021746811623068513682259045826335556874503392522522546495972201637143519919971467256798773625390440077818536321928824769853031028881726385773","4237878389686842267130078634378278319042890341604449542179139303189140782244718423069038875211532515284577349065258399272536682240192438206846278060634148","3169576440373929609734069945859804796282975291471878264742148523327775545180876448582235704530694869919291506023534499561838213107039275274081648515907621","2460774478779315268364740848969352067707902499003728140691411755787906534291894686059600025107877186028022022339949811475646402913408046965605587772111579","681342348441808292456090455722126545490460389987816621555262073702011068111554966639477909318747732581496548611380388498414733136248626366568539318533243","2938473256401771501268055332864836059854252869536306235951654273022739756722724069369449289973892362246291471782113875964259613468722066728297608203230921","2855869197841864824116412586855751147005048693739510973865550245108645599071145605889074047322113820222084086805765708645247448061819445963308108776356542","4064583686714516263157201495978424746732524276326189824109104689160089318496951705586958149058157197614912338636351897970809863188874866116497145536333530","2094064909486164690953576840148616480377924356827491848421077373583797070843016940925389853935015889818636338687844586395248257600186494419084538994100779","1010067419373185119280366527645527587944239714768988469824937341085370679817528018906838117746658544939440734374510098235797097203296070990475980941909713","1347317125822608079293168808464324619763371877991586195449200831100106725531609881232768316500325793450946595559461698158142302042786111924203552544609169","3751740482029163316900945815421077941966786684396942253268425484020846829219392100473707700904950291903484784423140827742805683346705307200419951408731940","1575517523356527992926406917258658397721925695114849081782195182969131106541162992271721211694435388666004668381028063175908238306612383640998844122316838"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("3126374308834442915932821942444063526677153067128703786882754427171597513698012006950879640639095671520243304109731841290957886473760821575036190559669366",cs);
	a[1] = SecureInt("4112482244765865169803697313853559847013569886448736328494129721939782953322020460668424041495498128608314599346156602823023274703184791970377268637160043",cs);
	a[2] = SecureInt("4308201154998353555195490034672279775833778834373642299425806561285939692204244557886234283988884488676241226112006608491037188472310994336722748324602964",cs);
	a[3] = SecureInt("4391917873072307206286287985946463245915902224352709795928862776268859791497520711272471891889709034184942726822146583479272786932984736805327810202912306",cs);
	a[4] = SecureInt("899816624823270248698846588032883346110706687657161386830816251343856732889888259084031927134112269472061973023823703678003649116398795420644456265877226",cs);
	a[5] = SecureInt("568741277091937616262768969486475805700850611240803708916607601154271556299100641290131084399444673073996965912528498643603614554341262245543712410029395",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

