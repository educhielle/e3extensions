#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("134342404601302212391451173298337257935193888560724740661675519500393499209701889514870591022177233034142250832573074611054254206484075176796285997035804683095764158516441702520439593091011353960286680467618434535833697449943044815630973598092874279344274985459619627647257758672306861278696542905813232205653",8,{"7123150752798156029881358402926225535630189949442627457527319753650510127582719198524577783053040784948569486155742090937913758806901705092170129102308812933155671205582158376487930497614427325227242617634810355901030571815519117621431105282039807362554393273048231704985823741548659871476227307654465937538330209487223901343124471274558299902214915083587670716247448333336562280881622023762330426739200900336930881011003276685732311869434459329419252419578527429985367534773251530885125017172014420280796219437597659529107648657240471633180818500497582898061039695688189979557818638055139669263604135621994008138916","9234580797439188544012583979920877309650096446076493437422725892296946705853944706151755792055998808859320771655589641347909456462795567063260584695431258500932553991401705468703867241214809026629012936417723340877820296300847217102071342629288978539564763440869741075164494497870549653409046051207957799245529989067516267744640538935570168459565467687442966285712932652696793032635382326195191860105895279974528409117048111236869794789117202772300160138109403604887421883311068756720672150194052829650922563842979429326825663265694006787640370289272569639009377689719267895054732802831704606291102409116338433594079","1210842064264122268367803277977014767318096945356034613712910461317821349355216273299914776837083275132437195075645562302253793429755446123465897060674713710440624648398741987514287003307478714137953180388604011074425549813107320421298072775587165207040073141588299244391202111925521556484361895465680783132314546656484454069047263003298904747935512153832930371277925340723550067244904433599078244153470653302890798382781002424161118990373681572635367739481994608283193525947453562568164459470547100537411050073111240732290630327727375862547245586714277178180972174084225548207363225336801188058209009640251542507473","14818667210273932753032960314284406471563677640537484456036120665860379383621347983831811328742924892699045322810115892607302938663113763452511409489093010823401585058258642770768904744880624765713173071148057551154804731335669956772715672797926424019231762684532947198061503020255870294165596541773264314762299347160295007764336879170671964408896745994675646901586511493878775381290727207622099408523736853245732106862258893783757474673769623599581566192807462844705445418018280472130170156432334801281344815972578009766276450001121558857765606228118240829071404442560946369104389743008830696788410135682471713856124","9946582335015215670954845500836029996013837771460783107978997972319677930171836785291869671714007724950644507135558035298887972427342087406414955129836217909723142082918234690849068190838920436812305573945717092836008084225861347120670357115629101685984277047392983518486185306569496682515674836601379692381838093364068519757013139490830098923369983635271325418276859522450425668400785434614275609403951592991726270691318171216628171955504058596313296758801822144850684471955330080733440875199987956526023801392325314137094131357693982123950226928683395139085453784802765018101472099971356367209859818659199024199437","7144593274853740754762889530124671268001679436696860920176287054882971666432858505556232732956948426387426559730856607879071861694135269192819523080098307738972602515622261833690661878216357038094287112365869750567978891764151713173855173090267291273648877505791586884421297540327203036260909839395612830487367119963865765981070463917691862084443988418757610334716877112780468466307924824530079573241629577942074757472338158103844915080970385110517145656940776578674719244781013295711170227231953529186698933139706715885858123084509407093000860411609166967808595751103725369921585933610682701118812401037020622062910","9149375753074573773435796054730867202070594630265374637715109220430964027500647196726101817862255185907407715403485702362893645744504938996601415489989660716834586081226683075243695468073759566770482969110038214944078261564144935680931717300907863067431747495163376080857841612369243040670382497265284528375083869871258022554210165908372006035088268480663395338264370560765747236195877422066452471077506308716732972865897388864776813069524851160586093090265983776177632417832139153415030835580641742703447869269146474964526274073307067164848137691352567904641312504224672598253740645021681737204333685554032002588749","4390916832010913561576905614688527386397423518213656800888292592150513509134861230751415172355446106101515793666852084150442026860171510229968661393445838152038557222185235418492924552685310125737834351086132210596613581525972245308207541997577522805499300578958354592111133863577948769079036781348878832074034214389053457431250681776009981371145217555979153671913217821609222897372384011021014354235335149374150727369945421792169831719317958028892764180188138548450612744804165241372441781640770019904496871299598138848053318689711467764707337271950759543084141295331051593794127020327075869110274425668568854824965","4350716656971041941084344588851751086219843869649154778015091278749718582376317296301471409797823906209949673591822358493407878270675231008587552027341521701839462042779230585306359790282702685375605400608308919967429283228378694877013241917870750565863178625865964892474739087660708559256623074798122693074330191697294811313445868085433846649969660769055218571984821393602056503181179335497654776549787615653092468143453032241368361435194332725841067057631117647018163343846554048054897152070956533603265343475995422573273604001017539957477258078097398817690133336620175045703834162633605953504215719574782782252306"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("4790655096048215976674816831841202430432363655209506583272936940029066300212384623029421969035777848624428502681916692337859541102166890768319046520372486130730602526494281418629484592098214899126477252055791450916780927312870474843174443799308646925971834139434518881266067959582515527802153834654854288042210874910617460586286175196679805861462464680275533279942648520727075770238494234658986431545731073350928406229727555598198332723145874488852889341651696292076514231889738885634025920868090344457345052762966768605993726561356283740727178965375939829301012110585681338128325262690118328334279453576122206778198",cs);
	a[1] = SecureInt("9954297980004201005931689947150865762155313206937570066871114151214688004855086889386273900272926075501826350072616597248631990929516555738229987620357266388558939102685839167555019416719754028927876783276296932636202332245747877306655376161789209901806655758002123323746589907617459551207116877064902783048831672328712792050822789270512492538068607773681684392732689380617365590473660481286524847469200210351615666165891374445553382707740650637730092896494421846213466407389754315216699949908944387044599772478350753199914645658008366934913045958242340978533886512694205127750029852374432501445436587789681780011043",cs);
	a[2] = SecureInt("1992495106651357718762951202576652888161556283926541498981506486035098260081640979723770590033877946815039597520008149640374061830518559837009033468572090094668134520181339174310452706469086605595901158238201533765868901242561970655115520721971423798627485106298196913572484797639210403445098795771408888292651653762012142357782507553248914472451949347798488398091513126255903287115065255789822293838940090346523412114277491971993971480982248757096571908605131621256078296883041817019293547914809295312308991218204585125456183263511235743568861691456794375354997852954735600559562641290866431567356483071146879894429",cs);
	a[3] = SecureInt("17572459287335494572415870564595356207187151870342838848863458836131564394274255211763737516584558317421426859716106892905855213737290948775947765921395773078530269762807898415358389550793098301195848509698007358196115112007993787770541963264533369318337318475707646405181838060806458288561932408951997716614654861608779581398085589344557571494018916630214230647637733516727268481042874243932367092613702180422889117598585715242499500428702614007287833209019131665779768851845992238719826215871348192706445044061782142678248988742997109660945091142782604406130704077879156904079186777239069963691872406871306266563798",cs);
	a[4] = SecureInt("825209872218037549342594894803837792603732672400435082276200215436816989852255291933980428590782462775321449443635026172057184872280233564493832248040958600744002890052418861582172218114541962304911387309258589555158277920498061195075592606160136209217275542657112649648775995281129339913087404515225699111286641959225022303043241940824078888202668324750009008862472724891519588827168341409726547598041572815350741036477830844788937876622079124388856679197531157081266394735313583249059503797228975627794038400862936424980181569278480767768875344183037120005116378336218335122799099581951185601039147638047630102754",cs);
	a[5] = SecureInt("2584354534559013916870236756935703315981399487913919073346670908354027838412449479574164161818949940595146163220141963773234056756074002444631660349984537938470550649672547820895255820544460401178112779407128013103731837572919216442531383734035335548242009446973488049908380171549103076329851098855625383621726778391986306106194067463823383315665802344059934751103976837485860000264859862946743626770942020035865588377960198853598345759947427525309679154251206883418245535078028584275208587940782187279863300749258057080442126053695792461509528984698436072638474855633575868178577692164793876170497779019873932007719",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

