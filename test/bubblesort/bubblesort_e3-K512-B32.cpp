#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("9458279487939990645733877865067696527799048310124326903937602357471692996836622479016324551498533153818796916565173074901820816734466541715894827215137749",32,{"84364219480698509295848754342565628634271677062899900056546028144104545697161726467347008386501202930117879972180049243506317965874667733129198297775539446468426151399791162094172091823185003481868675004290263263922326449003961805302467613304863868119470697539415636240264841004535007958394808784759995767196","61101786563580201391343722533839141323157098021029109951951717988032195976621229848966632063780240490202057105397397865707719488812493731242964890168268965851028188979950602226872094956875360274466441690156180110786959851933859268450674858090833388265235972153190668661552499549884150693224533277889151830269","29680044442955768955185585913267845711005376744723707620689831276749690198734776071578975555137948240978334738704434506887940887970610999779187797043605003440168218086745870344439926050695442943217041331185973916443364849681431858851765820981516964496557759471213049369767291363841865641322367332665313103971","69567872339186205791474705510855011993199413491279250295823229282496763619767105670389678062304524750746441071578361542468773484579505591644874904370350114410995759649791233586741703588839851054685993786084906596256535860385928359884352544566108016561225828779467170297526359581095278349073787643009717615022","54107449470607710516095875111329952814237311356010641285406446088410209799902268063710133019024321508221582498672608446163861704780351178907970786985494100560987861894662617565704506953180687587376114432867767463634081488902747092342315312683777675821340187248253816717633011703207461604133402276177913896306","23491748477703955213067047637420296532241830951100340886375617071724883293326985456723933713666083710976676023320431519533752748224234051060983329720814942680683514910633095751957647266202300287567258307870650555407955424147981467609866833628309104302615384543310617256188402077969448741541057300952632151443","50219297909288260685748521214832566527143182147642572217038389457053731026207657151559369965130070318649115856722885841082043834305147274726886662564334332736529330888165370354189372173927842252839380616214043611641555483521386738494140042081298728992311402263648726797513979988779842031729298982428697273288","40946748733567811891611208146896929032197733116493178784468710209242648853270166733461730935421494439764090286000309182353854336670632651553643777621814442728133370980606174509195015516379443975082737993121586209564960216579092810890235721793114331804027350712391964531350213409355182112012127775867389672411","52051378798400963777794020471471074236180448804629596262907339228717839788872071181444169664967958340177083883400897027388550354378891814197959344587157826367463328240238968849698770816806500219863625957919044705768583485692431553487405590732703939718803429209942354587259823619506874576097158503641825785339","30698701325058869084986808256998661052158651410761738426825760989739473711883621515441051516295338529620691971995067986027669253327581634382304507243900275238285896844458656789162797809720670925402097411472855629011357938528803573003532477292750780257379065214050547976363879976835991773280841059872990237258","4648844985997436539258311132242789981175560972762127869384913355000524840948395009251178537215403923088953945191067327145161447154048623239925290666338844268012043034552441779841088789675870471895482071528392214964338987807790845011935795348679204969343379662299633750146797224766080928215142524731280560113","58769000301979833701294298288005322304665257769151422602170699806700482361481010710689345272548088309082146357429575808581038488801005524965788692995138941666088728734956079888693546798977596310962586910309228274298224744790473273910177383223334449850982736561912899823400426664283557522265000957373341485642","32591554194719327046729472751652506845693773156668862229535619635640449828771366080253213206872169178128023287160366551197761374322088497498473169913289524543251996481185673955613119443827603909937846972730656372754336485505730291056005457728104480423992142011118631580479389798913545825759212462579014882334","15732161476441858990813834077990438005229766672698348820918394764811850165684476717038879472072842239295744078457288247003718441088820428786139018194277427199913797404119493927684364009378934670954928546758892810849014743959148052089841734700136744724592476351587414594231976649163612007075155089809733167526","58142205426353193460272749420716027082301412389212137659712485069954780147709352003705131901100158383690868682880573614419536952189904566505047489345770288906510202766550771491195213518334307861368134086182607831006499944638793609334616246447688762501413090783514886679132520204128366329875158116257797758608","68256854583830811881463377013046943494778412568809221021026595317632463562052411149853275263199587045612104710675878736326510250982372804293611388961383372640652362779567107523578941101132170652084913655550181375269556533188082693644887124995434991503758724319638396531195444624590986825049759187634607362924","30218858132132603992526328978702342928316100878014617861905290955590145888764793173063249663006164119028345855936624213398011993623771824074123469728792091260170925642481067702159844107958218959632403687753564749092664890071723177890726906663372788459339297779053851160575623042842994017932088175889381586600","5293818509273108259728914135253692412649008374162742443230042523823007369049049630435096995079558378423314840749718442608802768987850990657976209743924566289973408921526675050464907679280441733123062149641891837639920233062749334034225856627093433927441476839119723961337793137403844321008255751391199252764","35081147675061050411293836352187129872892040589783827332937328958190333681411352422120967633989776219309649340277061152570968584236762734496957909910647410013689993676242606107509373236744456786356369117539930894093628322256417911298062302955685983478996258901266340284466436247478702959647833292212694044681","53538607530467376050945346974830153539946538811435042118287663222637412193283895981919821644453780010863228607808200582219656782605399320542632546831177952942068732421419496970795294593603297307349334958715158936940656037598254785916989495118992195751970338954765422559981088398026795323985011610690783399504","30122633668927274728793905830185636526108047104219157747405545462767664512300038884324602517586329442384246815593138299344672317241785056491357257905038061437717932710478620195603817560860919864898819490886255898060224815893040842809555287106241012666434887072319545448089808071972936220256939390577751343300","49862351984361013126382854634191685186168236512508366902580287324711194354219907148960535572172332932010606301694196425922298404542074917384036344568287116258650590726461784907653234566443761303314335221714150153168220732342289140317668913470339767270277192891877572430577070789121076163215018104270274096250","68978579715675349924861485002961514386539187158105969717794194644911197662400825916262749413119468230221390240057865447445166213086623604475312652244703771640982705287424157703413536325922822428987202773514631876738841239206486784496831450580864468508715460917483114020755797998066193979031043509284669803685","26646859167997724444436435292018096805639587689396831697256956613608351215006218110704017850000566097703151576323349752022201335258686329351556717118952036922216278908597040688580235042734992394011958613686845589453868807729838266986681377688418885983332216785507858709124185511837869607523959598559076309642","73969681432114617324212761114761260391806239034984463932188316982279601299700881931203796049668488560887016402493376820099964292831979962364523602371385834140921459548386081219134436972519374212399124574945812341814419429316862785779808507064451883573593469346007945086486838506451087248438381187231602571140","88054494674304765496002054713229548628895305241942093658836174896470475914086327201096632122242768448446516585913271110961083879521389585971557343143457353863938263795190837203484093236942136863575755802998261812584883132574905034606104232282289636131121630846471284656204215988474782031292776282629372394706","7660030985095635980742841534210224614803862892141824997048615960924890353606279346021048619864871459332449081065819231745483576920281448451959720709634576976627389105197426645594777848709903084307482861375275349103506500773367421700639661580612764980480039644063525307210264304017703706071151983806632050977","54013649907366005733018385481484068450032172091269058529329983453601086479593801677203773817860596364303841528230297277116745301196369649514953207484024197502794067017841309165599762743187859408472394256184186553277098935517098777099049927347447787654967964480600850315579335525442156456383689683303495617646","66928685433490152560641636310796372823774104153819542727551119779584024386638236842755366298514840831664991190600879440683409168687197399188500974649461772390876472582856107588553817385302524363069794330661251615376236079875442735041637790464000853302580891055269115636748591831174120704269240358059215708494","24652047594122483892545431392773635916780840423095821892710141848719346551349561269922622186250280844565376891945360365261747157223548756970217907783246311029950297626031263913611751002088151366242464531814616331209940337791378713838878498970002307879101082029278697382126040773190225297267379213911885606064","84015233986682331171758542645089055226755922262383117799396018340952782553524562238106583798774015919586174626723053413348730971612636430714957932686225944048964231161807161692698296144640533357683259877761904888029490275384438691700643043282272345595731804295772429108517333629434638310856257589089284992879","84161727493537542117207228996925663134330366319240050708888298191827264479844441027698307192673009139622054428068914798686544370745884580252380515024996364578583434357234351635013699215736147312113007115859449448818608260203818200762208599518672733435420910931503640828790621606075828816888105237095141046933","88818999405937232472220940711071329535945287227571952222128429595581353276713112137183606219175050119967569782432605645212252569599493614464087973134127404082911473680606570550074448381454950091627466264021008454192778166602193101083367776839057255375268757574335575039177237860977911836043735201607070084291"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("86727294340942944247823036982706627048505339068846088924854212341198676834549273702401414153102612895171178071389424781713515407042466221339017604562730454920383213041760631486012555901377602022886130342334365029663936609956588077011747165934077249341298635195831900293627554615637013757338445756338646735436",cs);
	a[1] = SecureInt("61857902648336133223202613957822669063627017187205998833614671651160243443308799332013382638641677055370021856869814899590143454856965699370929451656715116947795796048489132940434479810986669116185127491690773263818980679295969533873255966344817203207082966958494205770150896505400878814536362270653907851235",cs);
	a[2] = SecureInt("9320914131110282225410483897108870367482533629556219956765248720656170339952601848750825612752296404876385635163989199581449074388838725167466771578507886842922539634707725436510500193371809180055248093915402577910807177762727426988930058514892175240454937193379021148153872891967393164247783483525084981570",cs);
	a[3] = SecureInt("7584405286866190312591900218353784621671996571665844902191597872344282263795199032868358911937453420843267515010676766810537738905489603288957252992761975018604475191199856696850528952144764578353037947647068494848622395704429795273795647019271901201163676083784057767443621647968315896298165583811793306806",cs);
	a[4] = SecureInt("30511653718502036267368975949691456232132716362702424011839199391713686633613116543239843517936913250750359764704720614773141057459573700721090271244217606546135720845393222846983011746537152480641957287816370819376399519657670713476582308039664979359866485486749118920005394972197837791756329411034238406915",cs);
	a[5] = SecureInt("56007486354345798584147809859938491569547542228277921613305532649472108221638617025537316081848965221535821350915044065794889298742710235330245246733538897174044134229945904799447571420193730585701395637422855370596180784154595477109072409655518336880386774458521376232841107820058269588490092705838141807172",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

