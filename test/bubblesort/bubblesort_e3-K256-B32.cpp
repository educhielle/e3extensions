#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("76482849302844325869908412974914489896915939420071746280042827434644458869341",32,{"4304473318713366990731128482363778991412426587612258820720055100904753072176024640322486359717339138923713293234395343080424974131985512904611250937175907","4555238434027369526578450557415849568661185067516545473776369802101718086770632050694789865334601013880416616505209402059987609421454194268005280462974146","2856093848464378699724221092740432657483320920223902536624239483435962109861113410639610665760041356524763264393814990380468146266178707332542460682798934","1264660700402777511553875768585600069945402312326859071674788652513514484538378475642292435179251295291373743402548383992112472500270613650423681733731479","4438618037288052418832311152070973883200717292298177546699594371277787719754425391976011303483201173664596483779688480703192945489823353296203642630457546","544629125914998361796596813938542191685296438112414753923893880377670088796437768074601675108235256919868747681580178083050831407631901672306464328041702","3996001966655549720796151953240536693321835284184587067328053777774579018275086128302928768435121827777476302470137414156948315657616291452162302014154934","5140944640457783366297475919129807361460143266225652175938539118757449334875690583167651825186748829855063499944441203088308955722187723633127347495534923","1370732003805197567924348183805650435958494618283494867605822846305548212895662061285019856173955528383720516882752923814978104670970918912824296964043900","3975326907514617860130968343541069986526207037223680032645032108822189661984747747338421559509616524772754010009400751514587304989273678749815783403131514","5780337021517215180029433330246925904849682676589309826157448272432446032618366981714223498382931042634415911469672313726107436984711566107847942254405546","1175091194326431917046031010918044739672950800084562890940892508185277532242966402441849211138305991980501351032658053914305472681039188771220981677079528","56527227179513882020236219626970139236712865644942017220901935574888674141962289353905838931468562533875817030251958753199119880046407813343324503829259","525304354751378389203361694539064326603711100917736218631958025845746916600100543310311096890323274359091685219904687683304325475865357360978581516571960","3044008545022785559835570671808792465004600717131181001831536362580479385983901350890064300422639906718997830564820024036846262622807329989382926867044406","23159997893240389968710446925568696804968213343392495354395793410475347212189166845389961629070238799227954000567732132536837637162931004977321455040386","4358637119418251790756796818027808522085437554898526590228063339837656021643146851923797217673877016006741893347742351364083391936561795254756836405762221","704072667651448076506521824706646106514558300781588575289587661275152793651123388966508901163073059961840532596437456223883587883036125709123437314979101","3277161844984348438425691534636162202892371197185409662412650569853661288834307812308146270227728957796834199508460422590274634106020665845341812068754583","855640247961006570942697936298531965033734150466337055634675595222173006046896727141160221073364526128691564217965752319009853652570585673588901302554614","476846851105357806160967718981752127990795303684742150602371784981040043974262844242050666529964979536849216081089093511832429588875573825446565417743463","2078797255567088176363177103147201874483034346610975710624727903507239490416019973089139234407339347443818338387585838329399841590534043890020479131684496","3882465873789766432167623752405047962598669201149901277316178468020875290345409542337442143012246970109781591225948908511725937617255284947601046418576839","5104334060579572468968134314570023308139774812291618425055670941589550106554645681819619140099329732527218606625178155923740340898976760524669403952860761","3083001174354281338460098541564400969194520887619492176775148144596014368264439950654086572118407058093878195848602555111521354112504659200720587418798519","1578626172076955413937957519066101511592532073264604714334940152272195663420209620623674706752993537960690014286612637850108371316398861243258053543300456","3027878681667530282754212398876938288478097416291926358809348599693214787335381715611622939631888383724911062620733753407108712590123332062242169059733139","5522067754894259453701929652137555107662202588250724368633818932856041729826242016798292821383536916624239021955343137470596285808096725081565173253302356","4884678236836072954229119803834650682359962167497436418443620612956102398502538624592177970897010056750949997955802855827510105582055367994113226805959845","3774754579508547627681941319263107206276334865808678348027381504601181175769386644391786711169856101821961428315007798637631307763988784896001179798631241","292999881835250519443168950606054515429920683786867894216775472739299256724397221740647569966287512223423391494649139017277033463322687457941588717416639","1445235669164574378840538813870306331374283465621425344574740538352322714526528384667182267675648880015832503492043276083758377807307865823710397032694733","4818017496703802232791756502907903058998247417252318259757258917303019374169229581930987234328814088071921252452153803879509848236199237552485986277247348"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("2091377260172002655144868670604175776715681311991750450403310556682527572176025992948654140117967088319295368121823394943194291421283924947557338122086016",cs);
	a[1] = SecureInt("5683538139696343703007686876394988139839105922505416603604296564085482925037254647557587079806003978281800505908025162870011123894376758469949140478581727",cs);
	a[2] = SecureInt("1121275176442393371959937470466179624401766755411410088720358929651159493101999010262944350063905338547934246159655174438831390537799362809218656082277537",cs);
	a[3] = SecureInt("1434154221760967114125823270798873532038645948360235603537656556206475257349501554080869379270841143568708604202139312612421793530826834062031648749051518",cs);
	a[4] = SecureInt("1274559996390228820287957663429525530149765763483424867854552451801973125008035935262156214447608194239192505638983280093540580599919835090313580863220901",cs);
	a[5] = SecureInt("1287182062889550198105337122189379205243477074915579902561993834656406887939251339540678117474201147655055868396051766668108259242994283241509306669152849",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

