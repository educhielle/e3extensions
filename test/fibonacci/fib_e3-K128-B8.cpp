#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

#define MAX_NUM 10
//#define NUM 7

int main()
{
	Cryptosystem cs("177262888858397848281250096078462407989",8,"10542348841420789841827404600239418752904562982981079272358630054490642208815",{"6047369845633530256686216142972035609140221916327952069771561068111383669731","7901514143858253914030934807337285693696970544849602215280571259602539400917","21107851300811569013951869612151494101030633543641697235238885193844091091574","2192049673798871218754919378920961205074851402276478172397482324005420853387","24799137195033466970531076955604032263383893365820223488006627215975144873732","6457648802142873643171600162592650677694024894947434317179207092613020954400","28437333122074528065584895912310077211055117064030755490776504649845893447098","20502437446985911941666319568011298991955941090765954807646859291056046585588","17110929857533264203161079700451077832004683445634524570070126803169033922691"},"29887802088893510438351561590121093503740887226104469153910397054504029608476","6349024776685692473714785148732125180126481097090900455308490921468765804670", libgDir, gFunctionName);

	SecureInt num("20673278864178507587834091277864405059334836458200309148377059895748603023168",cs);
	SecureInt f1("17660899866372406783229175723838835458877354302571511441383419286426771063123",cs);
	SecureInt f2("24577131677193867437604978034231172720626466112681093467929150033284436251334",cs);
	SecureInt fi("20087419696409594108342400804802182852063001837453507626703258939117339864986",cs);
	SecureInt i("5474250139824671861586614140201451459981773439825259158170488129931586255679",cs);
	SecureInt result("18165770085859394833036187177557121186480145218965910092550899290694406745046",cs);

	int counter = 1;
	do {
		result += (i == num) * fi;
		fi = f1 + f2;
		f1 = f2;
		f2 = fi;
		++i;
	} while (++counter != MAX_NUM);	
	cout << "fib( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}

