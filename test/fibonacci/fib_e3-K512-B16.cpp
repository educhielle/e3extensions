#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

#define MAX_NUM 10
//#define NUM 7

int main()
{
	Cryptosystem cs("10892305672018024331036481718931298534195604532253908943565469692789467616625593914561836562929627943613060754779903605883899341503795601004574667466540041",16,"61435998925621546655264536740370253132796096179203279197867977546004952565881510075572959302828209150084016542756083688990552654392160603661275350340768214074960062825000173653957792654033393631461510414288363685122769270640609394049042942133991832107504581255269682650207146032043506573428954085708830762804",{"10613376428133869212002832052007221426002076761233639623138432278988519324139166421204331259640442702865483644320067383867675714958888757998529254490408206906717408223162396503638810544919697091048347930016179316631218179866101362925965356203101062160152300398489798970227313502737432570685153176506508612768","105839365309492436587687932803649954469868291812089697030520180495828081774814442175388515886187185427353327880608694168369801406163150240568657679911308983540429366569507336685338735028978064013095312274563940321316139236833676426536717090783970177054252636287661949956545481691886095119096805743577654114615","105288625229916341133392441001798342980033211633902853547771259616557862544343932050001787903421204134012617852291619322093036411937015189653664118411551413679381723205546615960186730286317750369624538575311081283786792992522793633915448424893446997695425130909802221786735024472013313046963161215536875735960","103387844705976482646628083495832967172746596701115983221618944768443263879809668193250630849676712654465999829935754267415545574949038974867337326827985128777220707076203308875484565326875263798643827634438553655605472072554276526440953353145981864859990463332565564960788181990303177387094681345193743388365","67954288559491585191990428488793528110035788994349649896398315679046841530018060294043060750570689755065044683947950692853639947367734139988998373972490659301464029543234918386127624721048316487547906952507091574952513966345831832568270568806766979268803510840655670730421808371316088878699092801917244476527","7016054284763979869347329890421601325571804506565528296594292303922153564622927806820991226015347078863740116068998843910807747915294370770814284877470901737783343392807733339931060078067094344624063700362439697621431757406087201559716510833271592872595348213407608109710734345376650277163792040444273439412","107213354950604735117852309584341919731504585008471865856640954928489425409545098123642439772320514267035194228004678465756160016537442273819825504514098924944013011508679101652701454719022902003726953089728684042913896353939561792745535073575460421656781688226815702500254261920529393516943703972493292371904","67488721605516656533105591410747824598009486509461705104063652513129850526356751958867769711719647168327656950405871277090839752443418568637517821763935960821849535539705658638758802245867824032606689716903808781575843373028916630434329001632586548610636418893513896977202406804994741797260063622229950696651","52267089894880237795562070596340540931905981669467809107949011942834307721758245944576568683099828561051799796157704883407500766338930793350414561849393898988301658820566970970764927794607229501699633376001022678880205601076917454782454525097987191565939321626086418319944483343698846801716402792952316555505","69824112127664658151316067500877191901495422832181079426736524372733871502280508886688843534258912856306273976782880427707485737918077658854326429151561782184911889701551287212889082379301790434235495458936290378542282609349163844036676987213135751238575395702368744426662227714119665511138867839127024290274","23961980396742903039586146871054907113712360636164349082732879175991250157718590218976144360788264663653152236400292000704755130279233971011937426602524809300152576950877079329792095866818720477814741260199651314542134369178232347016721830124780940889474547926048968713299392614187944860798674617850535745307","62160488680419752535741590170506763102394467214890090560833426821663249981034869416287145339209217902833596153654916725018153284830202612128144455380497108517440159835488592310866538638818923656611324176630165044457899778855379623996083083607146152608426169007320411816802245849963667871429739052363362473669","49487312330305023073777604749685451016118588825625891444196345306717178877730889570556709035134525534374337161784697811662372262926430202022234308283594528245447890223058212792217665263663905285396750985518240788167363149430080290396482391854634247931861872427979765912814231774072602939589577140240634423859","48256808250155238466144038006944935954487956655631978937356022126369394135852248383968547447453579216962200413759307980670053030808419757697197136870675410499332791858135727898016580532182541271885861174492974662122009419741944233113213404427088379232514917581744206985212066322031287016575636337723112059332","4356036516186569252056996997269462353295702117611229258601217634220092330179641786584040115417998502269538564491319529696811503738302186739197728497797894553124209411143664163529092416726070872964753622275299985566580374107554042573305341288149045329122810382030586419024515545168397828987896847570689538179","75734309369214201896665174354575188561044540547956864010734828083946723524220990912148463114493730388635544211541401202224379954242083820515817737942615869979242693711834341713099906992486205527506414741818849225098791539467556777240782736763499427333932140206076886361494848577810690202619610708260026922926","93288761602842860834610176538066550628265599598091389301877893032424944128563578997555684277916745026308508277224978966864302269517752571251688696372875459236620520973789840562833868674978166111937834922015598521307196224605559275282078072022116217233595338738894919182790575543156464843286120022612204217209"},"61683953719734057624738977985956194157468165148798911849215739291086221375058606496369590873426968088346337380403350694004431768336769460360142990575021988652114912819457758711339020616392270609960848376750005031889653047013246145118877751836825521149089228448561003652344285104879359064998681453312416607062","117647916959572269873512061483536967366385888291656360518322735448831438912532886882197884183071014400776180921171323958866032659321163269282917278953786606816870191040241039802410901484164774337062848461811085290152951062100157256659149336813538845134866629543872818723795852830217237085946214665845906593737", libgDir, gFunctionName);

	SecureInt num("89967236260300116138477188390776938549103310949000336010732135233816919480020953402209282287287557872640600260764321570304206734461493242330779459556797448547493404393498658628507853165975796804534792751369214508035887737225453462893160769981677679677953989400546146360814854447912213987082502951601509394337",cs);
	SecureInt f1("88164277251637173691707386108560454581679831826574059984788172783414082085175016351390259543115226893772113023738802298293919522297175088056315742717165143264732529413085726235436952135842123094594603365518134429064631514916437294361290509267066810625779576238678568194971412250036090754799855663068671666202",cs);
	SecureInt f2("77028393599022302678808126477997344396199267234936846496538403182987720640932104083091784103991992333135805879428774471976447947198559969247895601946862919334091932927667701551566343428410830052686041796911633166517293929584092008252227362620976535726689130225315732485819827320856436960535667255116863913721",cs);
	SecureInt fi("43491974718652625065236602939274726488056557505172102115487512778044263435085356796648523728063339145242690950940826250433556624386210770648476894558906575738014433308533916732515874628209247917269120429833374512598919614514269399314351116937882929700925177445613805265525004929794952154584543527993313907493",cs);
	SecureInt i("117200330403289210731410028305365633469113595614088403476344889643366254994335533397936565281175106813330254991393269783285048459885904909296343836808985708752996240659628589178066387080156754197609028826168602202359020682836410434840372998505227030634942265493993830804586986243867912063695804427341069837035",cs);
	SecureInt result("12661192297644962809479792818708852441998352610961464263423416585968233520817455749639227504183165114174586575420959726123954720977035004721557040998366722833344148968537377566535734152313847586111746976658376035885364912266416818691212384776962026890649391399660410954584072583024084283572328099641994328927",cs);

	int counter = 1;
	do {
		result += (i == num) * fi;
		fi = f1 + f2;
		f1 = f2;
		f2 = fi;
		++i;
	} while (++counter != MAX_NUM);	
	cout << "fib( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}

