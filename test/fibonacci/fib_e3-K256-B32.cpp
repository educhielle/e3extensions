#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

#define MAX_NUM 10
//#define NUM 7

int main()
{
	Cryptosystem cs("34724685353778829689956118070675732283323178171929961441279296508457247827437",32,"721164526478126918655261231117081005937693778724193975354212706979261760172398307503961513480776189766657266005500475299795125961596859935008224998845556",{"499058884082322400035925215825060439521868225593681822963843463788215113739193076400946166970943492782778920210960534806894147928813918642407601854228789","142637236756178276642985750144208343922974187393164982104699719017207939983418302673425118256811445509318686729072072305568946679361570707635435057377870","305705860682438418992729053602419437064464793779445681752575758498971855048192371720980227814098245297572207819628588564265496924148708729157864926452668","363588401948345748257137133501133522615376806147567514525955954248299410285773187310900556516640464024828615597550608775840036605363114085955175800924792","686560322065574699425490637448070688328623348241001442401042248762863976907458597481048490932049720387193632949749596755993540097969340467412830709820422","64408697538734213896535096557139971378559884823917569080153106007935890843916588237111784467319050068283088774013000108007902414459871922595075380245444","678920906764401032939377449748074114685807972370270725493619526470415925212122523100884916686691565263807186938071258169948372514115500217181154431572901","844338469884397862312635605786874750771094075376705478499663914238246290163472065429601570859774292752158171830916690517587440401679647093561997147264985","955267158380095838884532862659220797192785270502100283797131532844610945923943720303095682996593019091675715475458985910288960531154898939295467896769231","993277706105797995023196475237009429805467343850205968567322049525681759648918745169046884850119774319277268796202150167321343065476732498024758594312606","386014930094647062034244805186355069977000904517473388084941791741245312362874654046386848216008571159634662833613031692216902478135693360875874024604088","61838757870733226161324758035314780964484628802689279150713593356715277701977114115142207244733710562892522769326481091776786906075963011882617721474309","498516098822630219583396549584637468279932444649904054319752125965049136458347411862719066435999429423146905591669915191507534961634848273077501730058887","985720477658758797468053767228375457557163165182387485418385667433353738988047553565639374181521036161223190909600728843025032469154821746720188657089478","724399310423901491792886324677841319580032440796722818069044664689112800296433609075113656328250044611543455580016074973633197303543510600009110655185813","1166117615824754619768223994153407197386938741800428753847663703391674302242714919179932758491859414005116762442546174812471081725620077891711964510648437","450074506942629176019704511604253134378235194280653930212282878493569900864468260503707836811665816704927647943976146967400803043378015276548499648063509","967119259636426950592866759475133663217347660579872058586767780123691485263778774922017772802572300609049610812735394807464088903815148383669635828786916","703336604151185365792359094758959282982436582572719303346055215356105179610977478367944915544749114220237187097530980289965276956567066895292307924951851","876461400585602054042060776358195667941881716823371327515571348356338614600297737360709882906724810059898910726844596293926845115829136713882996747697547","224330782844113985596070077331829489372325325444797030809709872400653652358831817131034188687723754195807909961127341057163887066207262647388865396062418","760168777653478118908611632903131437051594193317189854416080909173696170161362622084356065320357397354782099672255439440503550438139348454787205031263347","1154174686395764653232014690234735420530713618371840227142269354863703774621666868086903758123752699383180803444141145401747705262355132984577529608503699","34821041171350063487704732276064983471951891121470768718200776776813752398174562803201081195076467651180432496655798071168399411972361003645446351660447","779975283537185202338424472901211244868612213648555201844413418254147152912731264307001506896932518572575330990554534997009461694135781022191064522525949","377445409133636155528586981752604561103774301324183118716754195782191802146377376241932076264910102296353339898555559860227587885439004368724137289055844","505921434852849364311434388665826342329055152495590395552425443089389842578462298261695689002854178417465080392956976643893666796235955966205576824280930","161092717395274911436265214436149382393005793305283912653175061039484729865926903156366534547864835060006447038322495744935921157401563198730577012412998","639204704258099748931637038432839085792933010123344087426391837134949375475901881497082667839156295321994106319205117820940526544758820359279204105656890","613985992863608109514132879892272305870392293301045440961580503026618361565532516949012594486659859755678985461106729178554563809099849555412341224640581","1063416491830986091236931841057697294474500887676934045891350207239150954425302921898919977731064209425662971617403555971789460824218617309798773662957187","418285766953616355054487158171625608015848568221148638183288223168818863247713212479028268899654456127640236408814871700662926024905677385451464415750048","1070520968840413764622225293300438614316971534904955068926333155943819877876675570180871994059732882528664175069754298086411693414929913608084420354172164"},"980283962084776843117770743095190600459583696440754767575277210157429570253476070795794660785044200460541976933921949042166121178927881770741335179218451","439024172909359941789371500998138096399680063982328286638422528680813287640341138300581659282674462694654816699887186247389463252726164203922328231280177", libgDir, gFunctionName);

	SecureInt num("710229492329910845506315570593662461669437092742969592442930597168882770086159885412114295680030312355339920461454922234957154579839403969676211913173938",cs);
	SecureInt f1("644503722377000401954416386706058984840614921556165980026994064196732366059965333502203642534300715229927267159944790717499389436052672721648109689887557",cs);
	SecureInt f2("75808259170346823086048326814500227096622867315785885333302686728977630153634952082566476610004894630802946319406673735460035387488759411593682309823894",cs);
	SecureInt fi("563747811354974231519305326060406551481009948621741159074015638776730154602736853558738508095075811530351155821982723772343589636902429013665290566556749",cs);
	SecureInt i("227812471919104289559975580032571839843157481880649973484892998167838395702845664432882813667357745812203220355799607887593520074521780923014122161598198",cs);
	SecureInt result("304358245527022163155531689666166859532414453086476804901643948125948757923736212480572538571207755206662256994945164214498349128216991951331135203001370",cs);

	int counter = 1;
	do {
		result += (i == num) * fi;
		fi = f1 + f2;
		f1 = f2;
		f2 = fi;
		++i;
	} while (++counter != MAX_NUM);	
	cout << "fib( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}

