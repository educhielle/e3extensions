#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

#define MAX_NUM 10
//#define NUM 7

int main()
{
	Cryptosystem cs("7761641483818878053",32,"18078702153969772506552054765947122857",{"7505185522871067840616529611572376289","19526921510360024579453134187668608367","57550550307496014179665807084274264495","1967608520407200318096718587138292648","25379095949890957756161028732342159463","43153406244347512155307241510916936719","56515152821132048002464249132993802197","5365705137220579418719697835480169408","42603713724020512424709656406168597338","22392013860652946605470591170137941602","33777142212983015967050272914962553375","19252671811056247549608049604601095111","26827570045624556909472363572252759762","19531120494309317961821491753685831882","28836038870004559730872570782549200004","45273919665912185161317046502769339507","775407045868852477826242881374059561","50044850432824330261460759141628113816","7748034077997049276677164915275064905","55333793056482536682707429090655682176","32062870621592620213308979578389024171","30805756219945410905939244609938218135","13941094301929894761157724823463994653","40380829302623859448689411960542026503","24248284731530567420341051140141848448","48189015064932258938743945859751985174","32646987426515787437591368148415865703","511488456866768590129485963535044547","10442234712838271329162280986667694982","39175396469800851266940053867661238589","2748238438159482228779315117671385541","34942974479189147290482885426702397436","2931612102245164153625823058097248521"},"14532888723795963836959440130925616195","43779840346991230232939564332816100925", libgDir, gFunctionName);

	SecureInt num("44811844025827723916482137290686132591",cs);
	SecureInt f1("59106546742836306194251505424478278309",cs);
	SecureInt f2("7135821217640825643501657559719905555",cs);
	SecureInt fi("38200180335116609159349606364642996006",cs);
	SecureInt i("21886842808295286663733544447374086613",cs);
	SecureInt result("26060107908286578123100996842561736250",cs);

	int counter = 1;
	do {
		result += (i == num) * fi;
		fi = f1 + f2;
		f1 = f2;
		f2 = fi;
		++i;
	} while (++counter != MAX_NUM);	
	cout << "fib( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}

