#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

#define MAX_NUM 10
//#define NUM 7

int main()
{
	Cryptosystem cs("9104528646809096089058011035136024058328847719369475397302925693931069684518124503587518601555933653672679879390826465672947001043306946578101984438907173",8,"47645106301883974000312651798971029472327500296604833075481678435850345568759315054391237223852422438892142471168475469580893854856153834147279843256431054686189450538182116529170332371330769690670177593323925218242296886803357835040539460283905699040140020976453796150364358865418492521046799636750852301911",{"57650095558074063675455569524216535802469427777807831108966558022691158555258522788607038339925024927270737130032775994955713673626076707200595525760343314237199092360363980502030375001436222760890006297502308467294140935280983544599368456143972415532844799461139015611161489680616517241353364424105416458167","24539946219322142308010298822139507544834589115293746061448499459548220305075096533481558535071097899774041135919942707933072698109617965775417600696208006155372378134822998827747960149856622630719192868905230469238798285035876395118742584847366177497149369301255149272486071185812907248936782987538185240899","40184877218176024866497665666956299093342602567455859970160290988555983985178386369308816575375608350893800381665938678713961138665748594842122958323098554147186103033547616834739705173156508047922104101751665323692209007892597604211719663800299717730252232756913753415242126908490772733298468602060905606506","389150596383077502356917079968859200947301117452174156563147788105774825082364694979606217109999529779785006354748597487532354509052169003615052441850057072845602306187148377873792750226243310112886822836320365520143053152904373629379317848309584770033849759359272250240512703807305700869932295567154571127","48844895518485636536541965476183681531437994974946496248155341289929202764937390445957550659808091523211467349626778806298348158695145373538556918286234378328456157777105029210885722509365009347347028435239489673504796362542500103783922462855434464124768841878242055163104627937138775353525072665265289690247","23753037913263499743005317791657440048426634206052422000784070318781620073577475040992955330927644618628396386140693092202421878147549695597096885690907090930845790874005417155776797478498576328911930758747496946300210815366579408331244244501462883176211273202506920763998775994991644579074508032859503854112","42571893191931781897935275978137036687038674464290508338090489020418925521837013574451404675100862758973208657910540057262001517225452646391609011146401164026310789265509443753166020110685112903100725227505041391605743971998086629491433294165102929238120162252735715357672599178032887652587610735374161927986","16023646393991051176601713194268318478858687889734221233398182539963805959487635176449090234420218919108955573096742169928908263941978539774974813916294402942385023703043853145059287546656602927610194410471278656500139593788121247336901519891882318136927559156104689940111281863261900381112754736378218748701","12461543451037646059618209072957947577098047970943880134136155230256050868180268727318111109510927640077550549896839943263431416691116904780397398996237352566633172591968820863799030035018904608458057694092702605514093923115734921077462885122312256579978071063626423276952403010392298059168504699215589305585"},"20038802071828959691852587190154519185676881496385715841567470674245579310979326620964429245995869264983816582518857170833964587782472438933439734119054840434235675228160054805986084459329862053321944768952315341929332177222409925613375253099690825996824839350546506728728327468454120495080852869032002073084","11911614399255821287907552417356145738365327308801749326062798071147542153072612156467344261432611147306138013556093479612442458686729444891014224931005661591026249788433075744313146833549403056520714403454790542937907796970810097313704977670114541998928812801086951490686504090861697185180859570485636021132", libgDir, gFunctionName);

	SecureInt num("70502456756750781694521565693099591124134466223122704305605592657189690457256239362573027737325748817559696426729535737850648547258808692490501532546360948674299757845588966275232052584992211533088830305122168841238967168847019912971519077258627738684512986137944996583864448721894960227145558661002625679938",cs);
	SecureInt f1("70554083512899363952178500026763420671862203338896758970131489890125503510201980581103041482412280003162308955100597863667151147308662558156659394662002772795375599195503427905070737367518157926289417763719446433173930748162752769051624105245486000517188892304415497378277588958501595413143900702023629286147",cs);
	SecureInt f2("23468859777851549645984039911472735761044461316800932144151530988927389317684004619138657032965801820139956713116034184978384212178955643430768472669699838338012458449074447773641251234773391404289320314309662894007632960385760652009065118995029935560644989174126308447793340976112840392322682322230905943792",cs);
	SecureInt fi("59259707586137280038150118777843619241354195423049724201564365466429237859027196682800183183841241877671239318244810503414301383538633167213502373025102839978202827809507968117257126622727709087432707814957401202195926903043071866229032984889855907144999641943588188523791795524566613779234411652222242802823",cs);
	SecureInt i("65573546746102502226229015124198045116112941969953612478133849932133834813275217689755566169110341293006529846084627951597721943304963742942405537037449332697037100425243629428079831953569984414907907678347061542103994719856464540425320395151886371387032233916888429717247963030328800393426233349147094752657",cs);
	SecureInt result("67329753543718469473715951028571317646551689459237430571637691759542612149502658895382705786574699154590492933729344844274524866204972194317983980860184770821439142276363844639839307989174131245266551956699713159608782322426843320348207159080819416863537439704109931488566608344195279812725088121116596716783",cs);

	int counter = 1;
	do {
		result += (i == num) * fi;
		fi = f1 + f2;
		f1 = f2;
		f2 = fi;
		++i;
	} while (++counter != MAX_NUM);	
	cout << "fib( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}

