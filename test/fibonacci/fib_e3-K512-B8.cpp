#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

#define MAX_NUM 50
//#define NUM 12

int main()
{
	Cryptosystem cs("7699475436909667379043529566985986440994148535601448026630073839130605229617430537233034712015908861700957654667935680960906931721669750843929606619820717",8,"39377204714353310922816783533187276492264901018917006052354008925110219050355807122902694125615471645286858481820695805547261075094188237470455395406525638234138635170327270176356430730236756767871010781418973227560504566490200195010475919061087849190392963990690909134740398073738064691540413038244868988735",{"17584865670874362503067795400030896433282741185534795963758536119013306885880186761768563388252832685062794561719398047719101938836941318781696133071301044620052471117729429418010925876414929023298658807731989396011868119582199669745471374711971118176810545101042317115987672615538956269577107267346048473144","20300972175720826290116504691525180572362676300407293031950188716930426308506502012721601733336387299280972949108671691684112945716681317604147120908555854828766980735408828834298346730500711322096157698884767825578325572469540095720558389280990025533338917850427491099701956697239691999098937934883890063698","46063254783719146391274895355618248759095386084193395102738915642877527158857240220666960160589856410335514136165945826437491786047324483788134413423049649084860351081810696808774103930293246834230864074849044645203949011761497604572595224917683247660488892155609105598734549596208767847975438305992487092108","18757123823713255524631281984758238711610056822852446235116659402319154201339331439789731150822513253313141950695820895610501506017191560745927818292742918633280817569841823565683730146380741400597744376514729303677484465451979825063953281014431712482071724617914261408796609195962258200428835817811470725792","23384446054272442113217587060697727716750322861861392258213343006376495503312735953456891905784753291981590769335045168706660520424250375209405799273906526051649566965978478667215168730224361324659504834490960993466750735031564025013240585135156654231936958213960413946914846866812808577277876441989062008701","7053888395112346407539014093102078966793258981083506161395626151938570973677623129189006683793267935171633607716238307441315070767152753555598317776811692216044387982988210355791050149031558365770054221863720271219423872996070116534004136823149361599767237303232206525908745184158736749128159084592034518042","11918848460442072666215257494584167815524730896238895662880611603334151463333483483900558253682654896881747307685723689694562762909576230981729246568006949068706325728332073273752908675841064172884274716660646087971679444403324737601312463539550032241260848443889088887297913883639251001273148438200083755489","20600566475361519248124091729170402147607496569082826665320780610439846311523433543845386292099007302859824501008563275735492968249403276323664960872231910524041356058118051879048558534355533357330727016501973610239504258226807832234051367161058851732574307772141465640646199461320347528132417997291873414872","58434392418827833595431746153546393810690967144663263447355397093336898991223115762805569159395749844723128996497699708884359211310507975469947984141996243574096750490822309823055298394024096615457293739890275253731146133786363007617021843126791751543826036437096151620903907080993561111921192862749349737046"},"3178373682083844854679438264650287837215869067185248128299960224496253313021154656695915748795195559699046170732653349037440455686219904713694479522805037822070397383836671502536562035719839999177576964686123603990420860352612287398437723008493091918296389279118998946971345780074549493484197840875305567472","47150675650163472201102702855833981123342435092716693012886299570118093432312942794498657947510947771671201635900272316388144755332495413436946069160727189118339571126257766253756196284835437167510642064992581656449903077846932884851281603948016214665247404479032159345074860842000233282475345829544902450746", libgDir, gFunctionName);

	SecureInt num("46433830958864848120917295988489441973418082311744775211703311995076704932373789888608776625426700937497552090755475953081289018236486133484893573798635337782556228149833332720877662887352858546309748824738225696738966867607128854894550990902856232763746509542532414979525137650681140844238423699785418832837",cs);
	SecureInt f1("53896816555629213210512240296864319915512543195502030950720545328407731881540024605074953007425071373217546253712205116780324404282239972785011580714113904573695089042698928402334604285150181239959638770462170609365126972865637450338203206681487412634634545736419666340172942943966483418841673806787794827856",cs);
	SecureInt f2("15518389877508259004393347995803219789798907668642538169725310054174570071621997463264309209070604605826060487672414782866966969262253899671906140333743375617499861552526080887620733231306208038960831551806706013734506412309619626780439998527515026020295421967639892179657122322166446758415969259649217271095",cs);
	SecureInt fi("17342721668971390437317275623263799492537403974394421775971440263102542985731709093779223460162454157168752445822390148648439699173629596449116391975523074382474647891896733069637415080401576741387660376780368349060569918576194181026026124466458243069146532614152820054004062254739523553018029234656278064058",cs);
	SecureInt i("56513933294358060168282092086927039943186551262781010409815214496991063230376041235482571341600102269799822818531372771325504159937716967722601377666045620543503282108130277434890694238442930438968571710219063466265773658061514120783276596415908708667399838087539640572278570210281387492952458358746459214795",cs);
	SecureInt result("9934470723354642682291153253596541888812866325029106473133836108319015508614268700515864167343416957138750928613788109058689714051696083193496205428330044024904997294248383093751892864882890118315364534981414999087016205099050342480866686952430287898473345724505990647493479315951170499944950644866766232529",cs);

	int counter = 1;
	do {
		result += (i == num) * fi;
		fi = f1 + f2;
		f1 = f2;
		f2 = fi;
		++i;
	} while (++counter != MAX_NUM);	
	cout << "fib( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}

