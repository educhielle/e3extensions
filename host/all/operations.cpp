#include <iostream>
#include "../../src/e3extensions/secureint.h"
#include "timer.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void sieveOfEratosthenes(SecureInt ret[], SecureInt prime[], int n);

void test_bsort(Cryptosystem & cs);
void test_fact(Cryptosystem & cs);
void test_fib(Cryptosystem & cs);
void test_isort(Cryptosystem & cs);
void test_mm(Cryptosystem & cs);
void test_soe(Cryptosystem & cs);
void quick_test(Cryptosystem & cs);

void test_operations(Cryptosystem & cs);
void test_mul(Cryptosystem & cs);
void test_exp(Cryptosystem & cs);
void test_inv(Cryptosystem & cs);
void test_gfun(Cryptosystem & cs);

// Driver program to test above functions
int main()
{
    cout << "Initializing cryptosystem .. " << flush;
	Cryptosystem cs("107565007571758504100985458506002855574111484513959132983288907809429220657500814373774923970015480672667454850818954842423988254564126862760620598692739058768215004243490871932822289591911430765109146530122918010077150699854431992252185487588987870072467642354368341546053748760238460933118025517549761519237",8,{"2001836662277361048950673904395271680614391271986493312685192600098457196555979040342740216125462527392470810545114088894691189601827352055643219993073017842778339896030527624859373163073972841111871966098013236056349653935116604042775616718006207740610285564297997353674881627557945901866778399951238300191511835952399271548581746203872654096270307441855427954089945263862769682345779507552923047174766476659643481137154446745263763807099036068647266384269830810914660606266085357016764358434147407390055731225127724916023916884042198387136657614251278676693062787447841004967974089733966619773158064252950296712073","1302546144351922322744968623205132899648383614630919985246595772811819939043123374317364654670635730206014769765250403817740333290587204896298815047200599346029848382506894709222537752133984043137931560107994598207417911869374127710008563788198927221258187402693811517789028716786614093094658230760089064531311742947391742066295282773204607481040308211642433729625900948598504762364471856729388299651486020606857665939988563744926304549733524863402158205072211964257052387856063104005585060332250696910088624020246084501865745470873109238345739186760253615957393863822512911919176246578821046300739408991966848608386","72910954876691881082187480709817017338845200826047638351211035423458273010122324713389862930936643501316326995156894686181263528334442925937431725561937416312207205058711376010790402751051990747833835404196678022830581308247772139369845318599661165357896425452057725568890285051486903263437986039363413005947316490013198407239237992525435053215127128126973871948927200020626936283401480402665479365657428906599231203825388518135290326145424861131109683246466828990657592704308899370800416471609084722534227684462819649870787229785254107040821084794837164674265431154947257383290336966190019381572857429577811859937","263285260275423755397624543198606578219807743252948975374376387939143231869712044502548377623458161307199427892586417492003760447847370867402081940022559144887981288796704787559583338413614691715895709366754564253801480821248463772032824975075296992451171250952609406263957397584545444914354331202901145045236121318945649818697763108079844403621201742326770430100169983352131941597239235434083561555755103233316376276627362076258757635038919504293037414106249963415413312627932697700290510473042412126457452753437157588189292763992178455586221424937945804675562510693776183424848431076039718995351875905880413830955","11001692429357185275944327829657567436456358345200812528421070704894760058367071794483047243155515940089343085970658320694722455510884587903660440219084677786947650454319356226133314069346961511243829054709395605375993367684401534122534352928002779478357969716430723667701035602371464877122409289988229049655010352651016988758553518846131856113770007629908967682454100389425535037573850159393594559920296091135115688838117718557091648589339745330981640707814576803610371255072539299575923640686194625467698993138982601341518158189924844439552293185348758306725154403708214338929506566642107109094575958425109715223461","3420698077093226776768364281795544740763107794100276541966409003049583487604227297584421222876071729643030881486231154418776620263200697711502150816837051118743327293246424498975190082088967356625051790847977779693133072036738769995264966495698328812353266546218804566712497928441012379090496474662203546384776599360678051032334100605567511802747508557343017361697115492287596078470828221066491315368366366831075789684204861599730816596175149726484404011269897802350699922808141135965545144166475391542931882192510579881719142934760481289351277745819893466446374837238536205292346633855809530149249958549587129886359","2940922756100373782217216858523209116967505559541082176368549021141494076366103053273202586361216320290341302858469536236926261725465265275773630831365073814091358088009964769098104235388170211910740023975444421159236933270470564623306150162246028496627148017362826687788546332727256317397509763598770239928651031909930487717411478249588769924666611219184718713877780720448280128831072606625214186671406262791264664839349388762846521454043458606146043650388241668677782162860699475412290457093735819009161131387415154726878537614888849160231578818952708098384613970122339246895566166592766589111312932803030967058032","5062283652424688966861650409153235588861879346548464472351588881370331771294419712388453291097010550701652387130913962522568243704567869631728404353288402893044728592464552670619076723354740021924722128576529030868466929451587489057422951950844925490355661701681278197123308162967822488378438964501120293969204975747656098603104195971733494628992660961276678664680082233176750144798912813891133238305508081709831546886037689876204914606034717858959564596903629100666993001231065096805978581981277843718104525836056879124877765244557187224244769835492000594629231112287835449969285827158366936423572698354283433910645","5044585081329621498835503598556333365954357723561928194314561888802150694191688915867133827940199176741836191333326494014864021484156829184131750696224221007254365117428487512384118382853871962852398029410931728325921680129560471018800937218914482604310067106029375284836741506414600441431933210777818077371620986016555337771139454025307691630848485220897375919522294528058151444236572466974692039513272458793056874809367201833075665111600211631230477919392656442364620925159534734428481021516806780403282308806343840419566268771157373980528553528523882609351416643433694803020160309026908067696771727451650608710777"}, libgDir, gFunctionName);
    cout << "ok\n";

    // quick_test(cs);
    test_operations(cs);
    // test_bsort(cs);
    // test_fact(cs);
    // test_fib(cs);
    // test_isort(cs);
    // test_mm(cs);
    // test_soe(cs);

	return 0;
}

void test_operations(Cryptosystem & cs)
{
    std::cout << "Test Operations\n";
    test_mul(cs);
    test_exp(cs);
    test_inv(cs);
    test_gfun(cs);
}

void test_mul(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    SecureInt num("280103915851981808536926013754192533936851950439902663991652409562493667867799584489075811997413142908847889604612118517922019723388683344052853302537269057188769194881958631949318548290931068234985912968071695192692561680274496471978362677765373325793228044608470924784142551875085599931419399418890682034414790382934411454876464096947261977776801802374322027698919945746038136314945476591189619979326578032647900824525073174045814385585649766736990304175917673129372984742385843712532671631911835141451229331707221700608566961805396757005636716849591518989961240007580088370694118743316031386105536352187316445674",cs);
    SecureInt result("799580113373401126459156209279231440837724855434036813558333661800456745167308152744589506309897778200377430576191816135596719096721812461374954386464749383368087683173798396416577612257050757471832287279255048860629352413585037770093933783881723441266746885954469429695769273657698743646879159729622624381770033094689687437942543824107363216894301947532235414209155183690115192805559823059749386209475977286594639522208771077998612648010567510569459752707019794866311939378562253299048816931017779344077104611888706742990002762839160812160528755249719668582367500841610849969372238665783321051034637754587411390412",cs);

    const int niter = 10000;
    Timer tmr;
    for ( int ctrl=0; ctrl<niter; ctrl++ ) result += num;
    auto tv = tmr.get();
    std::cout << "Time (mul): " << (tv/niter) << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif
}

void test_exp(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    SecureInt num("280103915851981808536926013754192533936851950439902663991652409562493667867799584489075811997413142908847889604612118517922019723388683344052853302537269057188769194881958631949318548290931068234985912968071695192692561680274496471978362677765373325793228044608470924784142551875085599931419399418890682034414790382934411454876464096947261977776801802374322027698919945746038136314945476591189619979326578032647900824525073174045814385585649766736990304175917673129372984742385843712532671631911835141451229331707221700608566961805396757005636716849591518989961240007580088370694118743316031386105536352187316445674",cs);
    SecureInt result("9677181844174823341215536214716507198086066954794680581246177199087550570005707049439600297550211553801440038922563760694781158081030415419167945866977820924514397923461242323905198322126192754941484414190007543771005106716057460805599889313676843029583934544993071952026087846492719158045699314327930513892631844027624015797783188713222889615971522174829741621061125379865429863284491180933174085954860300638137340930810213936132750316198138196638604085978064058366144080771392443291551328346589796752710198687175702227974841826879408245988049992446528745505696679233721577085675010605833960873760966460844987340254",cs);
    auto mod = cs.getN2();

    const int niter = 100;
    Timer tmr;
    for ( int ctrl=0; ctrl<niter; ctrl++ ) result.pow(num, mod);
    auto tv = tmr.get();
    std::cout << "Time (exp): " << (tv/niter) << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif
}

void test_inv(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    SecureInt num("280103915851981808536926013754192533936851950439902663991652409562493667867799584489075811997413142908847889604612118517922019723388683344052853302537269057188769194881958631949318548290931068234985912968071695192692561680274496471978362677765373325793228044608470924784142551875085599931419399418890682034414790382934411454876464096947261977776801802374322027698919945746038136314945476591189619979326578032647900824525073174045814385585649766736990304175917673129372984742385843712532671631911835141451229331707221700608566961805396757005636716849591518989961240007580088370694118743316031386105536352187316445674",cs);
    SecureInt result("799580113373401126459156209279231440837724855434036813558333661800456745167308152744589506309897778200377430576191816135596719096721812461374954386464749383368087683173798396416577612257050757471832287279255048860629352413585037770093933783881723441266746885954469429695769273657698743646879159729622624381770033094689687437942543824107363216894301947532235414209155183690115192805559823059749386209475977286594639522208771077998612648010567510569459752707019794866311939378562253299048816931017779344077104611888706742990002762839160812160528755249719668582367500841610849969372238665783321051034637754587411390412",cs);


    const int niter = 100;
    Timer tmr;
    for ( int ctrl=0; ctrl<niter; ctrl++ ) num = SecureInt::invert(num);
    auto tv = tmr.get();
    std::cout << "Time (inv): " << (tv/niter) << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif
}

void test_gfun(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    SecureInt num("280103915851981808536926013754192533936851950439902663991652409562493667867799584489075811997413142908847889604612118517922019723388683344052853302537269057188769194881958631949318548290931068234985912968071695192692561680274496471978362677765373325793228044608470924784142551875085599931419399418890682034414790382934411454876464096947261977776801802374322027698919945746038136314945476591189619979326578032647900824525073174045814385585649766736990304175917673129372984742385843712532671631911835141451229331707221700608566961805396757005636716849591518989961240007580088370694118743316031386105536352187316445674",cs);
    SecureInt result("799580113373401126459156209279231440837724855434036813558333661800456745167308152744589506309897778200377430576191816135596719096721812461374954386464749383368087683173798396416577612257050757471832287279255048860629352413585037770093933783881723441266746885954469429695769273657698743646879159729622624381770033094689687437942543824107363216894301947532235414209155183690115192805559823059749386209475977286594639522208771077998612648010567510569459752707019794866311939378562253299048816931017779344077104611888706742990002762839160812160528755249719668582367500841610849969372238665783321051034637754587411390412",cs);


    const int niter = 100;
    Timer tmr;
    for ( int ctrl=0; ctrl<niter; ctrl++ ) result = SecureInt::G(result, num);
    auto tv = tmr.get();
    std::cout << "Time (gfun): " << (tv/niter) << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif
}

void quick_test(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    SecureInt num("280103915851981808536926013754192533936851950439902663991652409562493667867799584489075811997413142908847889604612118517922019723388683344052853302537269057188769194881958631949318548290931068234985912968071695192692561680274496471978362677765373325793228044608470924784142551875085599931419399418890682034414790382934411454876464096947261977776801802374322027698919945746038136314945476591189619979326578032647900824525073174045814385585649766736990304175917673129372984742385843712532671631911835141451229331707221700608566961805396757005636716849591518989961240007580088370694118743316031386105536352187316445674",cs);
	SecureInt result("799580113373401126459156209279231440837724855434036813558333661800456745167308152744589506309897778200377430576191816135596719096721812461374954386464749383368087683173798396416577612257050757471832287279255048860629352413585037770093933783881723441266746885954469429695769273657698743646879159729622624381770033094689687437942543824107363216894301947532235414209155183690115192805559823059749386209475977286594639522208771077998612648010567510569459752707019794866311939378562253299048816931017779344077104611888706742990002762839160812160528755249719668582367500841610849969372238665783321051034637754587411390412",cs);

    Timer tmr;
	for ( int ctrl=0; ctrl<10; ctrl++ ) result += num;
    auto tv = tmr.get();
    std::cout << "Time: " << tv << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif
}

void test_bsort(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    cout << "Bubble sort\n";
    const size_t LEN = 6;
    SecureInt a[LEN];
	a[0] = SecureInt("4437264596834157844428106970358456329438923060943854390822750050038022978538940242805364145285554393603210820916463628151882935782245860306855291437701423492195873581177269673021241943398506356222332414138135596103199599648552185375020214821474503367723413808025448389475210571389082272015901235500879361633341103252564143954151734435488059546821313466257027898013149631846052657906753997600942456904050877115010872187603071736211920592601759891115323458366763278986155951265570811957496576200001749014960424750423589788920896025541437752501150817581300493938525151696815309768368005385987962428164033434112131378769",cs);
	a[1] = SecureInt("3890793913195550496617845311605716590655462520723056400473221401410732153560363673717524398740591261796927529234333811710892475756361053846952446269751357759443123338235136555727485660470950726530265588060090220191608122447192339811582294339956034191153742930724070620076306266458931200722817311887667133623328587139292854579853894409856338952698365278454726728886056953001925734244693931686280830579454957176856700693177935894228867623363210592910725406191541225246053719219992131590179566196895194293173218064111561576378506572332912584885639081466772476416354745415680724022341567964194507977161764084762815583462",cs);
	a[2] = SecureInt("7841148268131558769963355948141840582766152380802695179557357819526238239726554236299700526125503637511361421955405074641804360583983058886160896409179437726566516566191799888055351947761038323218011115149349411176590500914847809708093593029272269252732723427887512152763335639812495708503635845315576863902811505544704716081350222507700385004474252841971689974072674099748214115168559934694698160019357285587153212438496454179884133946730776330892516720611449749627477432852758853575945076466291371437513434542555654097137343202603109975710319706425683846049168359511700403143906311195282305798081609735448293891817",cs);
	a[3] = SecureInt("6249717601238313456519868417524213978333451547805775721868018468948949164473239983665347303822082419302869820911097214444107163235176383268812023135870548594255113392868726170246306324174693997555585549021943759816120600872796887646089710173059793457104159031943020750753635594825347205621048815146446325690420980905364739611484616088958939645116458624053993052322467305434407980132106216074985768575419658990937054789635295440989717666038012535402252652248478014864046018985131364675790320145652257530149817993474538248156666464382348088355992217248968439996896061083839386592746335872495602743222442901842015129015",cs);
	a[4] = SecureInt("231424661145229011859490431746876919779891033833149972322247593568562635895684697878073226518820634671376196927513037210530101859591027500662146103634511966599369025480800864777284043583905104294834401956369125786482227908145351316608748635903115058643520518273140782497829549335750813599620321333922847855264632752927560298910678412082603488526181369819854256872188766044891956288079099412873611012928341928655486876995711619923579860881157421412604334951994636051023441364874782994175638869357714303499541456753902266927797634182379598081109338375513646503579795876736836933626275693166054121314466784585984123949",cs);
	a[5] = SecureInt("5030026141320515021257450537900224199420187877502651270378076586255563301704836636996120003309403794545310475284062235166293880769062092098094429816276466151309225915967072069392145500126511296066511203367275793160006484127402549671567210501211430457488336965321420602374589852399111946175725102023686654527953792330363731689508191716603853356610643305087566520371093613000622520572484054755826630455142379780143292329803713979805958059185148370425961582213940761573038713101234142026178407138380924940902482590211321589475855311782332782158122674173494053820450804467291222442929971112578917624739500094627482411915",cs);

    Timer tmr;
	bubbleSort(a, LEN);
    auto tv = tmr.get();
    std::cout << "Time: " << tv << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif

    cout << "Sorted array is:  ";
	printArray(a, LEN);
}

void test_fact(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    cout << "Factorial\n";
    const int MAX_NUM = 10;
    SecureInt num("280103915851981808536926013754192533936851950439902663991652409562493667867799584489075811997413142908847889604612118517922019723388683344052853302537269057188769194881958631949318548290931068234985912968071695192692561680274496471978362677765373325793228044608470924784142551875085599931419399418890682034414790382934411454876464096947261977776801802374322027698919945746038136314945476591189619979326578032647900824525073174045814385585649766736990304175917673129372984742385843712532671631911835141451229331707221700608566961805396757005636716849591518989961240007580088370694118743316031386105536352187316445674",cs);
	SecureInt fact("9677181844174823341215536214716507198086066954794680581246177199087550570005707049439600297550211553801440038922563760694781158081030415419167945866977820924514397923461242323905198322126192754941484414190007543771005106716057460805599889313676843029583934544993071952026087846492719158045699314327930513892631844027624015797783188713222889615971522174829741621061125379865429863284491180933174085954860300638137340930810213936132750316198138196638604085978064058366144080771392443291551328346589796752710198687175702227974841826879408245988049992446528745505696679233721577085675010605833960873760966460844987340254",cs);
	SecureInt i("3796802023512147157040111726409061057080712694413260734777073586793836372933648748868160003296081840246432356634256607632263142692150969664999435770233466630599154625709062247973382000302262559318968783072445395895349448232118965684687106862332069432736198218503096581930615554519870617017568370802005750367509722225817777084766361381001504640750313590505928508753703532661533671883422757799147088430189611949488954797374531247837026897944091541332848475980281241601717796156720821280702172047970581814086288855529440285186928825036543107067564054402692049593111268138454382119747529774711015045248188214081713298211",cs);
	SecureInt result("799580113373401126459156209279231440837724855434036813558333661800456745167308152744589506309897778200377430576191816135596719096721812461374954386464749383368087683173798396416577612257050757471832287279255048860629352413585037770093933783881723441266746885954469429695769273657698743646879159729622624381770033094689687437942543824107363216894301947532235414209155183690115192805559823059749386209475977286594639522208771077998612648010567510569459752707019794866311939378562253299048816931017779344077104611888706742990002762839160812160528755249719668582367500841610849969372238665783321051034637754587411390412",cs);

    Timer tmr;
	int counter = 1;
	do {
		fact *= i;
		result += (i == num) * fact;
		++i;
	} while (++counter != MAX_NUM);
    auto tv = tmr.get();
    std::cout << "Time: " << tv << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif

	cout << "fact( " << num.str() << " ) = " << result.str() << "\n";
}

void test_fib(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    cout << "Fibonacci\n";
    const int MAX_NUM = 10;
    SecureInt num("4806685984636121247699108461026327031684501854304825914034370381107953363934509962248188153941226724264668484204907872188831306327974097056094272286269188666626974866481095515008978106227859535006375513785926869861552341333002735616221159471693699088080919903264399294259633901720080502340000400142042305908068608086283420197035041692987137770419775417416345931355962191641387359742484096984085855895278400002340944974341219724312565568541809260740338532399863625178605330915600046898246170471056202138985566848724714646577918655179337191718159581073804756772886748134126756818780398285401939838865248312793527839717",cs);
	SecureInt f1("6634239990204049301275876600931038502133533307617759442787380087042412558851672253625067896040431503817814284982706230723674787616737809664341184660462014104141886264841876728141182393027330972910507530406588341072620269982094473529404433159565049452697364369770849218218061246130782817053947470232851325764759943826286449600846204587827052567648791325428449777562614581700907857981708065266269834848415984488705510729450102481460977500318892470558395884252621475713716223006131634469783942901173583518523852829652415790356894059797072267081018563597704548146989545051773519348843002407532630931747350780936635125032",cs);
	SecureInt f2("10680493634627754745240633784003425533316372142162605455482164785362744876290489792081307915371522259063982913504105343585784746292126028919006814160458295401481757405808389769587016280704422783814975569816770928117954765042260002480545962051206793759028270233104134514147852435903191280785323014032349838461409184900940580004924036397954155901986087755145821527403762499556739293664710998548261900461279174929498132664730618968659471707711632790411564470745132299006062283823580823473157778781170605721578821999648718572145714107887541837547347667143368244353966820571187525248620401919520060993544073023064756636603",cs);
	SecureInt fi("11018073313604859038013633039721575733050342923015472967080715010157257867371744728900860887782899457283891584144550081026715959845941206958775820423972580302362852734794152630471873469759304795219181831596038011584764780624281000710677726653447870450736883509405980197997758109938782276816188057399897881252950805293478951905326444350043968591455973762511967754856349825586112086049966531335949320726063178718206331697136569522933832894362327101289134316058786893695107351809470639705702763454079797716262231443534180385262773375337582774907580949461237731439991618268939183939853331939372202104743360248732138850868",cs);
	SecureInt i("9147722206795610042195645601608164013956760809037812036025068143995874282959725328739921206382895673768450850946903934049786005933111081817938088414077934564478522250370326674658864360699955173813098853681951270528931149155603376249537199638350197382551125427140722031133160578202954455501026527389693591107988059381707136443723002755852648919732640707669420954132948189565706197950488527309248161752278332606738841573771419694163068750805289054669612832098631707082409353928050834570826232134876579430677002616051606894731860742723545752083557757441691336283805445183925500619018170084298290728615748959035268430698",cs);
	SecureInt result("134432561471210889279400583325518598711945994182303877765438695495619885531331740939748084726725981528737505313842599474617276602328318129218401719958485690787513591303428946459293144222895159476864202484305298601543166026246642583396728874998200175759948953881552099802807172715629867775318509919624990670229018173635511224959983142220600965450939665165889207137094500881304101869818092375997704244677542773407162018282982309275824102056340283631058682903603866960142628625252375296379941096865668810576733128104582721471936812175365222460096272338113171277131032615813714921314532306246126216219659649149851684048",cs);

    Timer tmr;
	int counter = 1;
	do {
		result += (i == num) * fi;
		fi = f1 + f2;
		f1 = f2;
		f2 = fi;
		++i;
	} while (++counter != MAX_NUM);
    auto tv = tmr.get();
    std::cout << "Time: " << tv << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif

	cout << "fib( " << num.str() << " ) = " << result.str() << "\n";
}

void test_isort(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    cout << "Insertion sort\n";
    const size_t LEN = 4;
    SecureInt array[LEN];
    int i, j;
    array[0] = SecureInt("3481922466426815107667765087582445776060493112642712243667858676355393581602786624095601645923502879158067345530664402572509072668071414440596515953251573656422479146387940945527578610211835323066784653499592533728031448232653260576411962442608626184854405282903835330552691436618003585769531736713633865293336166863242152245793981830801311974433076609339159279038354457442778116128427925806463412863481579876266205890442307606107880686381757196711464300560938040244835679039625259023996417283077321715484537880752344629997854200165463511133111145420616830270248019322221943960674289781678006741219955174479428061320",cs);
    array[1] = SecureInt("9233737344148488636848132624515373294451613877221796033259428852468762786156433280881745156952003978738232345878045817499160900514035374971955891385108155481558669278891093294257571300041993256675128442263725156099711115408804593661828108859580169343288900711190688628026104283322506596500524934297718780250271278944062860020735809897035898591227718894572830193280248340220118197695761957291716046525918334464790917468883253622767443891626793426488011787918557591324061425512849580729036600142494363633824258734209186364656022022714691866827429618673745407467026954989425201794938677243759657938746109295090733673007",cs);
    array[2] = SecureInt("6701549649147271630036640363101697857245337591647245736949602236962951809722200582390092554041272176174253600251920331814659828106542962067306811773827065395603446745386981042593125424788472949104795792565378582716442655679148871496209959698474151291529840132415770202894993320474570490007326863628796540052386374417561730048034753774434258683712125787534260008449024187622782002185568842349016619361794453982204529575798537946509038151545727959432037617946950598886349224781093433228280449837289588766894125141448854038920931074085651645839683799600484426745086501016032730811181924241618559519456050639966396722582",cs);
    array[3] = SecureInt("8414349604696441002249505446045720389489778486321675920778162557043212379932425513742049423935584698333354672814150058250384880919035756036343281849225617409554967133738397354323469838683428254139845186419505233481169873423369587978919261924891082290266769759845234120108655288846116808427034277178854636852280724720152623804792075713171040542443729992353278335171133903357646575472292661143695974857602021001344642698467282914016385195594686651696430314846479353923402158855710112214540349180957311575937072818343579702942323114691150136989915202634907138382031664807645238843312304960542029091178196447979002146331",cs);

    Timer tmr;
    SecureInt x, y, cond1, cond2;
    for (i = 1 ; i < LEN; i++)
    {
        j = i;
        while (j != 0)
        {
            x = array[j-1];
            y = array[j];

            cond1 = y <= x;
            cond2 = x < y;
            array[j-1] = cond1 * y + cond2 * x; //cond1.mux(y, x); // min
            array[j] = x + y - array[j-1]; //cond.mux(x, y); // max

            j--;
        }
    }
    auto tv = tmr.get();
    std::cout << "Time: " << tv << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif

    for (i = 0; i < LEN; i++) cout << array[i].str() << " ";
    cout << std::endl;
}

void test_mm(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    cout << "Matrix multiplication\n";
    SecureInt a[3][3], b[3][3], c[3][3];

    a[0][0] = SecureInt("27531541096848835631249267447867243297533794769423665144338044573598814354046385100673211500355434825990930320866101997328124964181513310957244161353155077625277652660497753191863302914067248692924113459824793640134199909748334575513209675437751234809775186427740806372157117148705402600807186701925825783696273146897357532053396376464594481744010314267190658931387893364095892821451010210982067437133479288353446405314747688062676665888929795515030402101058150123411156150982979578368091651998731088814819760326332133568103000523623442894146407650763838492543122874325249188981515926148604512776691271838853050586",cs);
    a[0][1] = SecureInt("4074565454740435667627748089538255892347018699930577980774124554456319360010649312727656582144957665372604934750110992878622754894030955437452733886132894153914231726605656559512534880443410796011762082324155236569735733979294843191189038389052523579254033122715031597126371535455676265361445895072214383579429929497931952776753968474277387137669232409268303940480382714872171704197802503781309485365452479440948633735944900971983916987314054592291558527538148015817820431754042087812008984599265369035138336476934440848009492183171187722201281324162150169604502883433257834903760140409139018512709155716385033394569",cs);
    a[0][2] = SecureInt("5331783069150920816766182142682746789942053634401372778276264496612273176190811049019691393138998390664558646635523549973562310043240542721448228303437017942783959112054712419449214219580147607856175790763320501794333462737473480899047841521239590952676519745955284168898324995200077684146617676686390617640004558530970991652161307670690406351218825570062908680988638325448421401105374973307033015930014854037276173193738088998672111794934395583675957809567542926660379078175008548590309669017536745137606604366247755541679358251111657556094818291107551288305914054568261736349595883240806079586017330618117820736390",cs);
    a[1][0] = SecureInt("1377949817553031469669364311733915507538370110831736526889886755317629043418389071696341960409683272572442734390799535496317709360868373451089334409954739104847203237285646041233468473853172179982338366651021697044085554244898215267287250208894102585876247462904986553051485473023502257995253515514373889325502734146551358326669928596382844761907010081814188440610175249641407924895373032625673990882225865203669147839667098275488019570002508526713869914722551821515918075411635841593729036603551858007370329604841033600880225291866467289367224176599717418413944255232688941135918434106757221759301224382278302288180",cs);
    a[1][1] = SecureInt("6415577238871677048441382011664009143150405383319247929685557769387222788147803933115253478836651426406673302268595700500808177552758666017891324713868762819896918260394107693882051164205827514176646406287940918331560436879253717787854660448168919133930581210761808847097412669367329241162986964667952366659489102001644019708782041460626523744119718502651097683492363900094688513258655313147516888686444334644234660446114323911727560046073528175583488942013825020456106704236429027777961697101247880856400666861271541932116277296685935443614920181050304665326050992549150043915905769452420696703912772438894317025908",cs);
    a[1][2] = SecureInt("8672888760501972601959283401339283291395528518860377277206046544169986138848029424996852430781572953592093527564527882343871951442524147981633679747497223532405888245120567393991666580557472884223811729462674007346307082978007786353966300012637176487491723767119685890306365755674684159134886562426738893469559866883247225445100759246432948312591716919419272489723498502950891159361115562390004517243862521170052079148680113883914108014372447327960293699929008606375460106863111400446453234398485208822072750787429508534876283928053670639476579929908782836146478796422961022145361737885316187027639348217527802020358",cs);
    a[2][0] = SecureInt("4426934583223177378474782091050971733119607776467517271173994988594179439225382701256376430750084549865272012692837311769487344256407730323349903100223245710414000728903505136708085707258612356893434650720984194087737194723837071764370290017641759110495997269348146003414428455329784077702155095142787546121662679388556901547976283426337022981637652310664262998731768353351243879031346266780391200239673947749023546775106123314801135645392269864558537159084350262628911640342548512818491836435090407844411428793865617977278389803120040811608598902737585269267711854811428895903793738427495413017320286338728950349762",cs);
    a[2][1] = SecureInt("10666254718114954700320030933723202545522219145344239744604922968917906493666987554783196293741955281725727659519726071384505235318272766509482774636872423697318391191758990152004713640445656851891914842538278587791429356815584973462395305635237031645486661548683860142100813234639167144015890372422853627318062309289193379919991586546030737077172534805051233819019599695590360649270008074933795318811839233507049269305886914361442017631755794895462294510221456228747683365019522310243372232406919034381564079249687460050664920913350903212434793997554312782672965282422004870712041645972385505676777090614456666339634",cs);
    a[2][2] = SecureInt("10368956861584365660698849418806300347050152068754713303490465016303818293363495652171633668551139923212453501357362957521430256628498235971567581601551015961804074021422497335258532783020585113178559692985184860621476275746881704205490023657026659805911343830094791034825030696703375882055313550636881941090515370185942251882314490013287342387308192141733389975099751070130222461982158107454794114663927303935339328088557813350021949494044091813943011202964227249170768123379448652026433762351457228471209673930415906799609469320068983194135869099974957388128108043114385237586577670862889108121771820261413406220124",cs);

    b[0][0] = SecureInt("434609547571856395326757628236340141452878444343578508877296165706878133638277434171861738500862049793721082563888758253241279182117074575708172358700254264205996617656053675182205548049300992774673015759058365255947622547479708166884907381031851353054459832674750946533580258532994012276060405665133700547728929101605834725579625632142392745536675358878384344776569611459744334964726615558310438790267702572733219760556727993631672326604443562417739548597023323035374359851948212024008428280258148792976699399741048258599337132144841751525546334734224445300276423114207412955476839462197089596150257168637537513135",cs);
    b[0][1] = SecureInt("4446396623056120900518739026654696935504179920636336923347901892874442342656792923526653088612340533591240826753276605189178842222221767243678998199997529510610522376789787334228792377625898544464713160387724202640174610441427610989636051854732079700879806577885536830646962698312065973697919468986614612324069323610184900225257417212799739184301243667145019345697281086897808094580587500793475401548728170380582755104691028913988192934897953160764151240104346394720828305450737553689558908801087218886379950363211990561902752945840681285595957982476023174308572222686564158309004471536027216656014557527007695638488",cs);
    b[0][2] = SecureInt("10828152732246665307877451545894625668004711141309520744124914770802921932543869022930320755217800942273796785450650610636632235784725656216175274191409196485120115574553868044515094078995451588135473920533271565482142457999483445570104906683731961708358909973827442349436598105641831543182767747662171054433564491595947464126468458774312135092901449888326769982891610854545277984240720684494758694627993232355229982070710228142000347508530212429304078123606774497585268621112835279212251028888491371745261238639357655418270428392547134780167540626482850293276613050757208634784950910958769406727316608067192805118056",cs);
    b[1][0] = SecureInt("5459217568681607194962721769177900476946461413240587368992448214190783736753934073333580411464260860203479544171878355810657076395087611102681671145180357029211591865103225973689666399104861327097618217802624205728094618445725631505016719229666167424504819790225956403982440802975650587847020366508717102656787391156184349996124211158437988426121032672235510242519964668752449441849105414203613621139428830141871542823302826548907843082368851280374461269369284217910250328066931745492670618196800544732128521679686514094591946911915050534573717311478436504446618009152287619326038402978843803567703708035749593821954",cs);
    b[1][1] = SecureInt("6772902568344453514443727436863640800503353197654503878333142207927200231891511709803621906475583523030486734836082091984221522293157200140036894557914051025690371944656806484343610606951419066771765620629664838633606542282579872392518933578085723859190523420325314196100839569624880294755638658531728976040830482165921728223597195388988217282910204290559619838686413159306785967225272218773601461630447570934246410104614196889704901301941332652062364109043066832300470558644639401291808087930593914398877248561615536539679983161008890003012850758252661495271299145933905520447666600660509299028410274211251960871933",cs);
    b[1][2] = SecureInt("11340228313722458805073332739369388975924308602326485606128415256602400589008148982324429632270935822844867694529853840454554348953316711339205753141751895431601977656513317304659874780943434009148577924401651943182717243967373478342915730340905119425280245936926073413169448415594484912220692498921627437353416318342650462582398183021492199279410314810507966812309247035864526411204043067202531038889272092220328195286173852484434575457858916359689679584670843048259803664989867767768661324583667388836553772957103653204650943191440491832590583150905115046932872988186561331010644165971271703409643916858234881816113",cs);
    b[2][0] = SecureInt("609490675454102832296377941158521581994030445604289307759030101385859750553454548208968799207337996515314644069998594643531051894752919027335371184542015661016133291752140733700040718588680575906423830406042341570609127158675402182146737330474105464556051153768462761150430018351008195574731659248457057879606206173326999664903518870208696020438883314896425379270538903968511845845091737859050186130650739376152936752616280000361217063110665707956932153767520813276424251641360420409204879992315891796742782162470894598085299629142921727478234787751603965158321143082901306446016744383575845645836217100050266822739",cs);
    b[2][1] = SecureInt("5182958636561104970987430485399805413480631445079233915029455977300466161014772630226089763910545528308323029996787611873462501710601855116194632414834863212370211279797266735195613882378497076720246885295483914690080616387288563647157421588643835159300386063444791771782616641523613576044614329088388638106377644655844462431108771056629635298289121302624995298990864050363904550800957697624263562047648196623488574570660151040946675402026098524963670888201168613950065008610552473794299728225716748019915226739522342574165169112899018139235132793079088266070169038604396427609607974465942565913530709019421879611826",cs);
    b[2][2] = SecureInt("4999640746945133823482136739599050261424026722031894544737665670741123781387534951703973194306550511889509512187127766095128410000378722601816235167707867693180968670971385889844498295619210061684364962505494210077172742301618195637845553546237789855937335295694654452468720483138315182126348233488409742767364656622201049853355977079653738947122242841978913853077006926275188685363025800287873285597574426617132700512971980424420186797886736724780813817964563440256687238622518260590916638039728254665208197032506094193508898133127733141121994708409559719583378563890442964140691099239429508779950010497812834018193",cs);

    Timer tmr;
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            c[i][j] = SecureInt("8128076625790242321467267907370166486359378939520355981081480260490533683770473866225090911128039950883438683097689785548479046580143223013202929546663688983826069388253599376673840311765407057789227616959114309171836238708830102578576026836606479761143057119908745409245896146841958407209627874323991202531065417662684895421989232427799917822733599321645234645737753506404905826520106118597406876489364605400220389793853494265281584953393019170301720551314924754108111435602002504396008687377719385264779304215429689378137317161887196199952648364030918768613340446198295532107473398002263075813725921018898623220526",cs);
            for (int k = 0; k < 3; k++) c[i][j] += a[i][k] * b[k][j];
        }
    }
    auto tv = tmr.get();
    std::cout << "Time: " << tv << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif

    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++) cout << c[i][j].str() << " ";
        cout << "\n";
    }
}

SecureInt *pzero, *pone;
SecureInt *ptwo;

void test_soe(Cryptosystem & cs)
{
#ifdef COPHEE
    Unumber::resetCounters();
#endif
    cout << "Sieve of Eratosthenes\n";
	SecureInt zero=SecureInt("6180820114561435681104503371699402286565269874691243602466340409365043096360462009290237519929349277331775859399952149458514614500427946386427067084690251829432246648799823329911864340957653858701566640826820057937230024186311324488422793577651875623405719367727285332027773380706429604657622756184928012453347632850590622118130380795190509490747638657323719103801377222431452154999261959616825706538636416920504164235113516486130029917688605316466945694394322120214944940979149495635830111857620283488348141182652761723924259916891168820332358256257625464700337990797574283852977645460568955740616796264470026767638",cs), two=SecureInt("3059101980256718896321485371014283823547145670020677187770277804356214188910507754397231671109844391390585395557891515183014979442392371022426746772670051187322963823839645688395420438764115906682868225263838027571351307037767917223486040480698746033353738023129034258649091157809212643847590303941435504203283514442346853412129380530923220904959690476797758925578160844911318087068965440142620252165651894754564854893417452107738402932551309056883958582369120913469733637608078016691309086275187037075578476695387332340067336476320374743844603360611145494423801656909214816364121090788034669574224990992503478328113",cs);
	SecureInt bzero=SecureInt("7993262884810049166979329952688090312389082189615083558875541118934439292585751776553244542599259263855170652053370125870422458219356206413225436012185893798905980764978688749181680969220779533590822934651857723613315791052374510808536181877852459793102575062906467253578089123284390869687220216677239708538048949593491287213897601749137282437095759948913405847695464246473391893340208229466399051688452000563137182773170595469671672815801919505764031210138370117730276119274792188391983705071097905596236096314401187704446281016990909850680016621398567568799436535645378624194535735972431400975156522166363336420217",cs), bone=SecureInt("5826526997148159949069703965234412905015235447771223732496348366073629706319658047827655481712840392409623289956406980093383478633014472155748422195365572865308289859705058536209890428829676380589171880467012892526239864598806092752014396879619747531789615156235233932087277366683936038837010330798499080029747251619704674202490082119064525120018685229034454426771065216865662121688778093795868650864227426475418716604261086487087453272083062212094840963197764627014385408131638169397185958473726958794263467586255736122960608589204259409867407710951278306775001205578621408421807992367817107617787692592465735750188",cs);
	// calls string parser

	// SecureBool test_one(two); // calls reduction

	pzero = &bzero;
	pone = &bone;
	ptwo = &two;

	int n = 30;
	SecureInt prime[n+1];
	SecureInt ret[n+1];
	for (int i=0; i<n+1; i++) ret[i]=zero;

    Timer tmr;
	sieveOfEratosthenes(ret,prime,n);
    auto tv = tmr.get();
    std::cout << "Time: " << tv << "\n";
#ifdef COPHEE
    Unumber::showTimes();
#endif

	for (int p = 2; p < n+1; p++)
		cout << ret[p].str() << ' ';
	cout<<std::endl;
}


// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}

/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}

void sieveOfEratosthenes(SecureInt ret[], SecureInt prime[], int n)
{
	for (int i = 0 ; i < n+1 ; i++)
        	prime[i] = *pone;

	for (int p = 2; p*p < n+1 ; p++)
	{
		cout<<' '<<p<<std::flush;
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = *pzero;
	}
	cout<<'\n';

	SecureInt pe = *ptwo;
	for (int p = 2; p < n+1; ++pe, p++)
		ret[p] = pe * prime[p];
}
