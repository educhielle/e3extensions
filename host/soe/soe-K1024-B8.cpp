#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

/********************************************************
** Create a boolean array "prime[0..n]" and initialize
** all entries it as true. A value in prime[i] will
** finally be false if i is Not a prime, else true.
********************************************************/

SecureInt *pzero, *pone;
SecureInt *ptwo;

void sieveOfEratosthenes(SecureInt ret[], SecureInt prime[], int n)
{
	for (int i = 0 ; i < n+1 ; i++)
        	prime[i] = *pone;

	for (int p = 2; p*p < n+1 ; p++)
	{
		cout<<' '<<p<<std::flush;
		for (int i = 2*p; i < n+1 ; i += p)	// Update all multiples of p
			prime[i] = *pzero;
	}
	cout<<'\n';

	SecureInt pe = *ptwo;
	for (int p = 2; p < n+1; ++pe, p++)
		ret[p] = pe * prime[p];
}

int main(void)
{
	Cryptosystem cs("134541501633103013095982219787711127630311163506541319931507622491938979480556083627308440233091000220235124491735250152567526236188586610294494349892539749249981078459262095522705990186617697340201288683174573164645647722007808795618390417630079860794518148636953953715068915682156170725727205915282589531033",8,{"11020287419763847019838388120535360360433169611471323321284934166582428057054281279017944620875188796299798710484887796719888001498526007533210166364262423079080709167114051256914909334469356903620738685908046637309165222570877687746392085951258646680769982122181880717154679650963147021325391423542126841014300964017799203950618959645023013792587950701793025088762946633958033149057806732945853137910848544108631608953193525966745304929168984233458986845808457728346082205497987059588276609670956394938702348648386877840445184152844761851661252165168552801239149396639181560439263004943387812241438659071745075491186","16508324366358855595228493387911441673290667819965075982304285536593685513127369729154118454475876027472904979862392215037406995042688426616121100094837209667929633794442848251075357838815128855397924885951359864275365351585641386090689646378612578347755319611200552683346036141767892524468810118410777946935317558628098524904258177469607909251424081585163840158099658651165070872727309233817702770838261990150083838916989514293636489674161895242553671682159789049025874189844662234358013055994457129664195103409113886152578874951057880688667507045244858182315241371517680006873521845224399614725724162423413174598750","1509542548347343408772754653317949187321436993992337662610504545640714503393990525814072244069636573230449487827713394201276512906971634535792123326828817357875123596506142377159882504890207470464629727234370580623898151890377113553948571377646960112662251438300689028256188775958497026701125191132503979451897712637199211276743892895117901699414175652308620173921275677292431197381181008228835998107562434665855542902267398600188516497236389115869152155607234640480978530658854468419514362223956549180549306935069121234726281042920113253255978661365476808730268071376396834150096485402472112259352346236533591305995","2188855654666434924248571817823356355309652249636652342585923904046518819905431284935937951103891443209602413920284026911861572885398031448098483281437601646939785664145277322511510368077892413803694278252792089567217399047374456648493978490660663101254319915745325999584002471790743253915391561229529789133420670821971322070921932980767722784770543739969331009440948353245102974038437065934900804673328507382176363481320550053122092075902775025632630274251506040872766908946475009426837717748812596520046124748256435025088830970671215152723497808090897119635845952238617998610039897359270664873297447791457852959190","11766825583396863001826780532182138317218388431015723604620047305246423476328833268293778491069799552417086990194550048423318395541750360264640843528770110222155732421819359531317991760795674656307912978689224890420352558844924782073182221610771080667897854237385477934711047730521122387626213187575962613435527945386940628653744528166143142780036421326889102203815580568535790942760070597921192793693844496554089450086920621639310279107493967248326287757116717452285266164974952342624935137078535044126981734470929662496522412715763492885013955994788453719741188004738777037767555311436579606746085730764639175685277","15042687036230567433173010210904893444619396977577203126803368249702421960028103801084024489805378247964782109994557071383626661654321118324912502620048237076342361692731406147320236786937649591330138460635833147999836900077031804063188931955985152947598794173975172227360338295178267622709322812106947449607941295751669631206843921050044778320173799240979835511995458096118372978731182372067921836393274205128714648968713547514304018485007719697288017119005523853911168008447097875393937811478707354792096385663705746728878428159264414750052812423836209414158255369432219461309418230343900927835484611742667894110679","5395594222414645586671258602586843240637673906619767541090798793032434076309131773647638400871945486803150995039644216433786589868831186797022921980883108062440302627929147021362712871659815897864603119816559227147605925046809479351960745745827938420674597134338724759909276159194916530239215920432666828507550183678044908314868429133921210833918798909899969445236980432962310493520625872158879344569600902610570349576027535740447149290831817421039114739239391029696443701522922690619126659718648308872191658454621757476850097108140676204591207445088051784635464585795169849516633744561841180539367664519159563410191","5893377910831577969094571459011568041605207299613224786904954734189147306206994161375238158281759179498384747503476896153980450307296594328644222655168891033943846223010652022345859044813750385820770307014246344605879061325837864109183853544601887576852424178728192447512345513880392303366514444821180715894098534981818092223301974666577901835501355699041750020210806238015342422378763364555685880853435525166110088938110114176605790692626428502714758962968390000854894579899397658761898643830630643620854532950267917434134356304927280237088544847368270776740608707256952534397201059892482311396734030738233385529281","12914326901814605155896732436379094863156506545699802467827269344382665614558587512120408106872959464191227011529547157283910067689517588501314430402798936183143002536032585130344787519129713885671445214602027025801431190248201641831785649849698462148790634024849167808005847451819322413638223343357071751196596741308229254220742011754844070525334811454212818865384313598270995621435255699657632611367855899056563238521373789869246170156504853803205450564184998394438284564049893765958710645618462896576251971502866646929710187308827815184300319228983389166406450071309032421073578790533872098199391315744394662967386"}, libgDir, gFunctionName);
	SecureInt zero=SecureInt("4399315629902218783653605559557797245906096465518106378681358067506803470714680992319703030044873950731900633194702934567127698618489706769109383302491219020717662179698320515854482392564284916124954518739755264840011108774795370163762946885474870766510021775415421491545290524862478241530037940316708301036871819735691555720135980205618613509416621048992078162951670070397137835608009760050071937925960836488462819653317946385196952105146796595604044134704822372542657960895870204333792174474214004182374466474137425804314897250613070835468180928297515554477392282576305693541338311922641004579254942069839934915645",cs), two=SecureInt("10390001405557682893111970242427709832572199892011485262200265204229918673149510438608090012213899281283075795684567451576865587867278246756655014337170112734650357298960433958289611102473056135975298703947736893109804460974941098967354518000564117713862344635602156451554990297534391015804996042698548404812818509332906254366176067867192477258105969215525566350501402769490524820690092923648249651371949936589942602906848826777021001076702305851715786526290400095795566299568984937281978394146198702059688124310611744894960923021765846315112942433113625275262326130066319719271956676057342145604322326611499831106447",cs);
	SecureInt bzero=SecureInt("16791087057913385657235630434589408122412786983319117031302851134237492721367208656198314949914595424914884485463000691234339499324334366632937765627386881439687233906899540950251013511413318514589152611172167573679495937040149920308387610806869565413791144315528810846786835531285211761885095675578581069745799254052190705032429041415623066607415216715936096433995502577726919167901948568523761467329121006655915316654299745447199211182111310491637257172930543461149420074602946493075299866696597354436813762350450713112796635121067203734595085975259729244005197733533747288522342162739019509056055919253447366268591",cs), bone=SecureInt("9266585668084442406735860623898347755433858785482157912834541379987003920069867578723828791333118060500729922413906297076522060134413522726979270616354664862129788166042083173086560844783312268960491281399804162896410156255988344207664058327296129355266837371332914787910983143290499180144096897423955824939752006402608277733903132789083263428341090260564035466042957322401988511895637182641078926190976852319452396920337512514628070842825057239856964450324919158586280609156080447739373378254289190542790512168221967486981978463319552250436435783549143694281459096062155364491513672918816677085872294159884002648907",cs);
	// calls string parser

	// SecureBool test_one(two); // calls reduction

	pzero = &bzero;
	pone = &bone;
	ptwo = &two;

	int n = 100;
	SecureInt prime[n+1];
	SecureInt ret[n+1];
	for (int i=0; i<n+1; i++) ret[i]=zero;

	sieveOfEratosthenes(ret,prime,n);

	for (int p = 2; p < n+1; p++)
		cout << ret[p].str() << ' ';
	cout<<std::endl;
	return 0;
}
