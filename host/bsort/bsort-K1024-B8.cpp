#include <iostream>
#include "../../src/e3extensions/secureint.h"

#define LEN 6

using namespace std;

string libgDir = "./libg.so";
string gFunctionName = "libg";

void bubbleSort(SecureInt[], int);
void printArray(SecureInt[], int);
void swap(SecureInt*, SecureInt*);
 
// Driver program to test above functions
int main()
{
	Cryptosystem cs("102118408767812185232895493223990099447769612344284047381368344377823047141903174007720689111556668106545671447274489609680423137403683426387061875581612396836151441045099851996862648764232715645871335977218583515467940474587293419433867247493968029286216638561903228779750055897477871832832563068997940558701",8,{"5775236555663767599553618891831957379908432263439424969291511980366515183837408601869409404507106401185257563333342910589566664994116930823110998597129017268906102378606571754989009392768847300128692209296948105568842160739521227919576573445396359390853610033957279499846253438239765298564750128883633888599518837955746810109492962605781223137505174546589108203856807790654481912066417452121675551441323074169113826449271728562694031710216263327420551653484764481367898117045907309934120080808973178607813366529053004053944796560516354769887060501578446826972899301077499313473057722763431306761766211088047661891089","9334073506965260706931734534188270280675203546322936833347913346092132285377918939445150425409788559101049384360082921799099510912254116332163730488128517351447589966769537835090762397337389960947668126565642858481264354138577571747781626552572148622254429815550675828133773136723005871384504872755078947061031648047622069983676601219033010798552781764074696313260646343960221932883167182365460008344098639032578168448049026254603926612717190303702525689543506041186741577284755021522774907078422117653475259812653703871794763588047154258436012398846957034448773129153798219360952887164681822389625045366491630137682","3612080579402796036071235478953492166882355147872054881725701901298055100712634572113498835872843596969259057601377627210492616500943207207073834121803683607108449234224741514828198389563245625693389809602606615605910616200072742159165757683998899383052253007151913721219758509840242738892849055603889592611030937820146823285205446499304506386888074616119458423570589954953849015557659979598734635724694093434321441942133674066393866115679458673494816288083079854101979600896687887292370638659402831203147968858200079700930377147185148020026984043731316414023110233224413069651968485349089894778639495004282117606202","5013508119175436924919541817737532242124023065220561073096512561698121622656421064937687760467837471818327059091350852935716296626713338747552887536300491854520604294045723350143032218188935821273409380015720441689106658614095158861723492882722764175386434155574568584245217396740806458350080580896213532741131060635971005253785100883415546860158771810897232835628821441194918360459917160536537862359087460414945255614303164171811064804046755971231423906080263657452642850720021317705430091932575980708033989887001923256987120265720707583017326359823720953231632424297430339040993125390588761156581521539232107566274","5923756529115373806303931339603773826942233416759900516962121730451690608503629119705829152630740878559159733550947193795402657653429761698229698302517214869996978805840591969061375236550984416174559368345927984418766319939091315223417469787030946924282028820845556763492795097346970619641172181605184315384018702317706939080137147450550137112434064654635438519357817967153995129697349951702013532301620613510090521486906422985883431949477026424872239873717957432485521817964268605327834411398555252035341747677173611155336051473323832315939389531749511907173314089591573102550976838295890974270836142447919978558532","6611112504660754535053181715055666179339351449676991073248933995835698256194794835359479247227535575968486262294502320203204249328951428825412188914898102427212901485785150983764400354761162190591187155915400765344881527189048626223091186335464047415074806324567820714055323348850815000149392990386834472156501444437475298045119844271197805727183144956051413884586842057045126471696951358945545527064495636743727973376291849911537429488935123873457916864511495942236036566993841589859648540309228828206284670573213617473809336903184056335591587858417689086427389682397107986124486951294457026023317109748849605318949","3534358109999428669476647949449867854655718851878605992763846377041170621097802767018337270054773355416802007224582014967046715754006574516502341057178820055545586810674717625697012329461390219207559692990080416665210882937937644353370451782039145473812403556044871086747217171928041768571493391315320037169957851045345004104566811570813145236931838523394126689727938645061832189897296085653238362717823454773900596330380793665375984513417618071777922764970456582209018809309733391483434577156495662883957857150364219278210740252683800903922862914023827419285387791287092547032314348110556980587750752629778934089088","3193760419470450473992596520881774747270438297869973485667451237896202965283909490171425897747316985103397228223424940377850494852422073639042537894762352106330134282320829716062833202932650506607001919612171978770395238081395866634177535963432821410843603744472874525990305813441272282954897714631674959690743666928963659091372160940745816716716778355070089769791088333805580541596802336758800277519436678720294045210062991342277996077192209802413083018600415845137644151761542106811058716557621490595732178290973809966009548640767348503389542307112281593358067820530714851097955025431995457391827832866671648598420","1374458250559986996727148380173380984004932814033299216430964674412691701637057611379365636772619666612449003523229152224120346557039069328306880283330251212443871668307818959878240550776195599924471884407460581513490945130218323187029571200772564051315710580629890614504987750821910013213171026290659280757353590979281378742225535435212119235309248163695523886703088194615217914541527754065243734337860020390143139643925355072205818545796468743326236814111262913700438408578490389871895089595995335874279962317509615698637439726673799791751820055098992898515026770326981802911096728695413123871601834888543956433023"}, libgDir, gFunctionName);
	SecureInt a[LEN];

	a[0] = SecureInt("10230261546479159431764466930962243371056318353728828309711387354538937811182105972903969273698578904037814810966331160831183119576565940468156400276498893633785734205881051081824947709387708232730605379072702277814798815222795076402376299430537826104214249897674985285705530485494930922945029240960965750238916022237375455822184729398727976002029217546596326243817260812780232259458045904512111065701596416211272249096022041193872331285302439426024195099735918019111967129961358186212047588858015668473456734798894220593110822301666704237822390622703668479893266292072051344022025085643772285200121641501201763691525",cs);
	a[1] = SecureInt("181792918800851490983041912000483088227024358889493341785630498633507496416308188358311607437132014408429296505322463348015399146240740893469879162348272427551433881341396471134149904698100688876041373657096044746682353553002240301702507822087182269363349228145139978446176723344344200023444172879241284225294500410761783300802117327340947404521889340648106127237899176792102412527394955820364326874751623673754837978963992506653872377615179236796629898724407772623307432163508866780908574734276375789596355457081091721437758625674101938908175353833204546804780377215998361880640895590276648393017952916149111952684",cs);
	a[2] = SecureInt("695134841271531194768466864675516423520494855421052632232314025275439781622670133972919207985429942069986868259319262117841088143904683488842283837673982950113967702248653252250369429527683911094165805727575506703484767879312990681545742725451046994278324284854113854182953067717526005930781062757773248697286636514562625731476795028221754997308067223263604967177346271713962407827980793633185555445651532011554122695191561394218207810401104469385315731274199270714380664366915345240501066288104812623492983319556764501643043304187295395677894672544589341351101240337289688022563282468849473234871631018587360195569",cs);
	a[3] = SecureInt("9329971896198337632480608453880022533490161027465812474879030330803658614017083280534953808753695186887768067590031410560746232659901231385964725193074175498985481156091522796832792410410751664651544212967207530309379769253036303691150284292071923715855587300664249404192204681102470227128005288680927528071006652558047357933068271163606961855087451061142623853761543716629985822492836124385235805902187682034826880370896810403455697436520586983197972791389808331093866848746020516463686477564788972857024750243933036737000626361866974031299575493142726431834150838969376998481201022232285394836569686654595143607519",cs);
	a[4] = SecureInt("2575377052402180117658010036014167623306789472003839924608988320019972996654550543777099131054260292750738910252471875434326548483164984491657965218950731019817566364153873107181177784583000938841363029873622983351941253899479860586546682170285061418045096386957905771073837387334097627499281611433868163796927573160678101746587771260394298701248128629050809537531228365791075022313821318285032939217117713208604378603923246842551722807648332180069713143550151812451960796650101534626179633302028712717185678620092082299035195922146828769369587967117799571299406663096840699301082935598254564632842175718927218505080",cs);
	a[5] = SecureInt("2017228374080739645242963826841764867539473277469473468260474092220050315458118208808295242823104057122536410858314348527530554893710714372793302081926235375229434172018464223236555894226188845166034782665094080250225632141170115077522992914474025246318786632568120731295531529014137558684874052906849032745734443094833047364259127484123077623404105012539366539299859596132845467316665021638633758072965024591818222797079332498588623614203357036091158678398472097627846790443618319946788912257520165101884886095461994029816126010931575956323291094921085433660660556139731975347170373920457979389478912213888737958038",cs);

	bubbleSort(a, LEN);

	cout << "Sorted array is:  ";
	printArray(a, LEN);

	return 0;
}

// A function to implement bubble sort
void bubbleSort(SecureInt arr[], int n)
{
	int i, j;
	SecureInt cond1, cond2, smaller, greater;

	for (i = 0; i < n-1; i++)
	{
		// Last i elements are already in place   
		for (j = 0; j < n-i-1; j++)
		{
			cond1 = arr[j] <= arr[j+1];
			cond2 = arr[j+1] < arr[j];
			smaller = cond1 * arr[j] + cond2 * arr[j+1];
			greater = arr[j+1] + arr[j] - smaller;
			arr[j] = smaller;
			arr[j+1] = greater;
		}
	}
}


/* Function to print an array */
void printArray(SecureInt arr[], int size)
{
	for (int i=0; i < size; i++) cout << arr[i].str() << " ";
	cout << "\n";
}


void swap(SecureInt *xp, SecureInt *yp)
{
	SecureInt temp = *xp;
	*xp = *yp;
	*yp = temp;
}

