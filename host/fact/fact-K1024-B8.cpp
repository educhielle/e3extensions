#include <iostream>
#include "../../src/e3extensions/secureint.h"

using namespace std;

#define MAX_NUM 10
//#define NUM 5

string libgDir = "./libg.so";
string gFunctionName = "libg";

int main()
{
	Cryptosystem cs("69317591661278951715283707634004079307522519121992380894568084853787297002213999536652722565860613129247535831302904730976541201079073104600791821051427192407539080197700398158696147117539419986736221250534038884758878548760060753038724505425601512364100456439335930382058725371786927429265812130149192969921",8,{"3895291450001334210220807814812952893846901308004477484094275726447740838922121427257067954015103276645797631440569828507574465336808412539573304968004046335439184280529063018686749843101348202844050082661860865620793558041480584516819749595915500519456443192491708262179291203211251706018740561785642979468202562957940455417520719710693947153860087462439033854669491724004376850419394296617969569171394867537732111089056634622856246656172401566126207214172324884239335266078313302900862518721537121300441210720151806167092250330352948055590219213583152585120842159752440433417574439988497094094194956698942890091878","3735883610111435090361105773650464978514444035421653064880046774114470920751046084571087127990874127070951798353546258804376609957710646894803823376048552604802527616087468974912407934699406769633144047773796072007623637726319252832303402244446025871968796396951061506069650524932901913998159633086047259032322610317108469242331275529269853366575767154007046440430799931943363725761109335765982256370832827005660827697483934278900116366997382083624119599971709205505227248110329952062642340528487383214538829644361587000831826283232749715396435990922875553696495069310129138390221007152771490948377121996812237355846","2433473832847071467635171012039298048864010382260757957071459378251934365065407805572794482405303544306049724844376079113839663012495073741276426593305108048184244003173016465474952428032086861885148503220776073929856399330923489915106670828840358296655539350665284011250475930078095239896124430243962899748438428980656493866820138067670636601625811679235803643580888005251537888629664891341383258457748190953139586401267644613782494556721670812928331448333282227928057472532120621567670112468481738502613876808381443811062712464915865862774056523100780946483297357338038278359320509677684606001822602198985488152542","176572961294276132559722714692646217914263413832975933003791035860228544340070934351597845433899901932303429159107601157066756010301651700715308004922227292115013743244774406194058791351033435970556100786006768065072759707593424244188248595362186230660544673716810624724032128656471960745426713073018479974738275304493049533098752193727718814049925269525803581340865878969907433703965957621627228701092000554220458704134034860039297394838859657717808538644957106156750640401622151853061857043116998088171687597744385365024789998138703347187894331955797963035991664491626249336519244147466184128145603327338940059925","1264181057908618019645748505517519512960909346775858681294027328436933471300268558827271798032812814926547018866794343332020715576108300641448663468637456344467855666095047832792612906191845696796429606330182297321322136587872206622401339105951613047521881277563253503819422068880093568841773286009200843843467342655454728806742694031747736626270857057244442986336138857468960418322671895309266156499500163909084813291074503235574430149323153335471480169684627879405790221197989942839013017129841796727198428883892047474063062876107750750674599647890773573101828996179175563626832811581653564471494477965672514207001","2180699204641053659836291143600994571848356433220432299374636311308339536303449696757223538125694378922683250222117293135041587711050246611592696770166128235169246979442727877172603568000498666762171220962149599270650522421014870696444518381112484756770210466853298769275480015249157530603881690660976755866997307149299534849557259141226551235747200452724093172421771242786312115066274189337546456751737960380706811753249949962059481440497434967125337032749587618244179435216281482093354792454860546537465731985123997823847428242766922922451620387092542818715834368047467814653764481056000521449027500939027103426274","3989773276842536706208959240608474250205347656131124349815128312811133262189785886415683660483355296327909781758859239801045763491578921054853105697929191655291026787349809614186542362442593596846327914693142157424185237168195576703916608118483966884889283810560981210033993659806005732083598586000839192735665647914593183151885881435227359466411362690241050349102737681598482082304374310427260055849683932376375883704670498031331328239844561387819779673481953717493158719133124620733703839876191967335796064628072804584199128123122947173641873376850765345324538878666959848052465850621440926888279713842722194134253","3705002147243590086349082126580395104923785714264167441756601731583783950400003744646069095290544245332901818998124222422995839773493694686112383117281537440634693911723573755662619473607290056038614807252550026124845165561327635285944340868460112002800821729244068203033198006064021385611955794155745179073508032180533356997769574112072263371651275411095593852679150738557107628267489119268754761445131575686419553067211304983720772518538460325810241297611266709573504405346012614433639546843957925499771065983339594949304702011078418496216263111883521356924201192017834934091052896294530802656742292938832124064045","2099944636801486765392129505206571241639426365557045428975690054639735111967214578126584192686278683848116381042717826818852300684669626837956388200498946829353871695608183668167205386930451757520070855361996948985335316969628674412493216143932351242016236351321902798609048574953189759881059986112342367521208487076240605235645268710312669923591628018270096367883197715074386137165136849830616230212563026947496236609099607605588322936069347974667044754789702334253126078829713460555025140533217644340580414755647450005518419973106698969942116898096498289591776618482963989724495021283938375797784915137309846741218"}, libgDir, gFunctionName);

	SecureInt num("4466819917281253577911353769150055703418469508041274748360329661539980981416500605386263902889699518607271136090374083185541841238394749418981709717802085000032818287400526042500319093336049022833520916642998921181133247941133002464114094958188183457474202063317582436006024044715395034727812254793930487019067047846899395622227305579643079314498684897174168536632416483422382452030817397050495781997608102666115804058389324780358037603025933580877964084957457844559847484925536526407486099824858349518041266998842930871033745011366856119998493159305720019005324082194606001152243738260940446108215656771354672813261",cs);
	SecureInt fact("2265750206610371987417406193250214185262719800160015787703857879189793387147542021503578262569603693846942533663444062585616873469256514238453862628285620568321974086933723124918963085989092001023377515397545534187016267988304519331479677363047804965651039192478335005770509089047453727417898635466464659444386773585883456373592365766554740034708501385304191976034499468595579790705826357552197585107442437532306498550878270234186534031975560811915130663561727444018904762041433816370022410935407549650181493939999205960317553959146965530940180388036297731864711039105766198831762581786820642731906421258781572690503",cs);
	SecureInt i("3847642132612763876718295780111732006529378111607864525448493487295319048632258064459550930259181967675613106587313740552487584492420289370765663639463973380367561194416955273393918129333440687093348610742961207000484078683669663019379858944075426848987577952392365670882227229409380390438277818897154768222339118120093483935799741088619273400176693795032563644114571328649877083413049692050180450130017992983835581326154151387286269749279380118793560916320514296237918416599115015946707520053533355438424405112065629862442676789064577146202578580594385335072879594209039445848813658902855237711492227243493425103955",cs);
	SecureInt result("1436929425959625207046755426621936597914778504414563434821176573816213208428974949084131834232338018448488591001243354291455619169296329256405639366116279744270781676993171831153671913783101964651914601508931439567070322001256766364765827399236338199902530772209528768088804793081350629996519876184520081609037024064545529908958623136707293390124135928476705761775856440823220976555175650753739625008673688579327573332160022767627313268624266776470066755579686566080083008908536707762799841004298576314000672008769402103826990386488308422604373774187023083289022552746389925954288015755954807636341368823424168142110",cs);

	int counter = 1;

	do {
		//cout << counter << "...\n";
		fact *= i;
		result += (i == num) * fact;
		++i;
	} while (++counter != MAX_NUM);

	cout << "fact( " << num.str() << " ) = " << result.str() << "\n";

	return 0;
}
